
canhacker32f4disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a4  080092a4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092ac  080092ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080092b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d7c  200001e4  08009498  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f60  08009498  00021f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1ba  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb8  00000000  00000000  0003b3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000401c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024deb  00000000  00000000  00041260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ed9  00000000  00000000  0006604b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfae5  00000000  00000000  0007cf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ca09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  0014ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009170 	.word	0x08009170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009170 	.word	0x08009170

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN1_Init+0x64>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_CAN1_Init+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x64>)
 8000574:	2210      	movs	r2, #16
 8000576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_CAN1_Init+0x64>)
 8000586:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800058a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x64>)
 800058e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x64>)
 800059c:	2201      	movs	r2, #1
 800059e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ba:	f001 f821 	bl	8001600 <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c4:	f000 fe38 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000434 	.word	0x20000434
 80005d0:	40006400 	.word	0x40006400

080005d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <HAL_CAN_MspInit+0x94>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d133      	bne.n	800065e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <HAL_CAN_MspInit+0x98>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	4a1b      	ldr	r2, [pc, #108]	; (800066c <HAL_CAN_MspInit+0x98>)
 8000600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_CAN_MspInit+0x98>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_CAN_MspInit+0x98>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_CAN_MspInit+0x98>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_CAN_MspInit+0x98>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800062e:	2303      	movs	r3, #3
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800063e:	2309      	movs	r3, #9
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <HAL_CAN_MspInit+0x9c>)
 800064a:	f002 f81f 	bl	800268c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2014      	movs	r0, #20
 8000654:	f001 ffd5 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000658:	2014      	movs	r0, #20
 800065a:	f001 ffee 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40006400 	.word	0x40006400
 800066c:	40023800 	.word	0x40023800
 8000670:	40020c00 	.word	0x40020c00

08000674 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <HAL_CAN_MspDeInit+0x34>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d10c      	bne.n	80006a0 <HAL_CAN_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_CAN_MspDeInit+0x38>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <HAL_CAN_MspDeInit+0x38>)
 800068c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000692:	2103      	movs	r1, #3
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <HAL_CAN_MspDeInit+0x3c>)
 8000696:	f002 f995 	bl	80029c4 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 800069a:	2014      	movs	r0, #20
 800069c:	f001 ffdb 	bl	8002656 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40006400 	.word	0x40006400
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	4b93      	ldr	r3, [pc, #588]	; (800091c <MX_GPIO_Init+0x268>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a92      	ldr	r2, [pc, #584]	; (800091c <MX_GPIO_Init+0x268>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b90      	ldr	r3, [pc, #576]	; (800091c <MX_GPIO_Init+0x268>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	4b8c      	ldr	r3, [pc, #560]	; (800091c <MX_GPIO_Init+0x268>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a8b      	ldr	r2, [pc, #556]	; (800091c <MX_GPIO_Init+0x268>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b89      	ldr	r3, [pc, #548]	; (800091c <MX_GPIO_Init+0x268>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b85      	ldr	r3, [pc, #532]	; (800091c <MX_GPIO_Init+0x268>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a84      	ldr	r2, [pc, #528]	; (800091c <MX_GPIO_Init+0x268>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b82      	ldr	r3, [pc, #520]	; (800091c <MX_GPIO_Init+0x268>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b7e      	ldr	r3, [pc, #504]	; (800091c <MX_GPIO_Init+0x268>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a7d      	ldr	r2, [pc, #500]	; (800091c <MX_GPIO_Init+0x268>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b7b      	ldr	r3, [pc, #492]	; (800091c <MX_GPIO_Init+0x268>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b77      	ldr	r3, [pc, #476]	; (800091c <MX_GPIO_Init+0x268>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a76      	ldr	r2, [pc, #472]	; (800091c <MX_GPIO_Init+0x268>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b74      	ldr	r3, [pc, #464]	; (800091c <MX_GPIO_Init+0x268>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b70      	ldr	r3, [pc, #448]	; (800091c <MX_GPIO_Init+0x268>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a6f      	ldr	r2, [pc, #444]	; (800091c <MX_GPIO_Init+0x268>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b6d      	ldr	r3, [pc, #436]	; (800091c <MX_GPIO_Init+0x268>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	486a      	ldr	r0, [pc, #424]	; (8000920 <MX_GPIO_Init+0x26c>)
 8000778:	f002 fa20 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4868      	ldr	r0, [pc, #416]	; (8000924 <MX_GPIO_Init+0x270>)
 8000782:	f002 fa1b 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000786:	2200      	movs	r2, #0
 8000788:	f24f 0110 	movw	r1, #61456	; 0xf010
 800078c:	4866      	ldr	r0, [pc, #408]	; (8000928 <MX_GPIO_Init+0x274>)
 800078e:	f002 fa15 	bl	8002bbc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000792:	2308      	movs	r3, #8
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	485d      	ldr	r0, [pc, #372]	; (8000920 <MX_GPIO_Init+0x26c>)
 80007aa:	f001 ff6f 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4857      	ldr	r0, [pc, #348]	; (8000924 <MX_GPIO_Init+0x270>)
 80007c6:	f001 ff61 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ca:	2308      	movs	r3, #8
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007da:	2305      	movs	r3, #5
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	484f      	ldr	r0, [pc, #316]	; (8000924 <MX_GPIO_Init+0x270>)
 80007e6:	f001 ff51 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	484b      	ldr	r0, [pc, #300]	; (800092c <MX_GPIO_Init+0x278>)
 8000800:	f001 ff44 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000804:	2310      	movs	r3, #16
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000814:	2306      	movs	r3, #6
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4843      	ldr	r0, [pc, #268]	; (800092c <MX_GPIO_Init+0x278>)
 8000820:	f001 ff34 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000824:	23e0      	movs	r3, #224	; 0xe0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000834:	2305      	movs	r3, #5
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	483b      	ldr	r0, [pc, #236]	; (800092c <MX_GPIO_Init+0x278>)
 8000840:	f001 ff24 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000844:	2304      	movs	r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4836      	ldr	r0, [pc, #216]	; (8000930 <MX_GPIO_Init+0x27c>)
 8000858:	f001 ff18 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	482d      	ldr	r0, [pc, #180]	; (8000930 <MX_GPIO_Init+0x27c>)
 800087a:	f001 ff07 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000882:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4824      	ldr	r0, [pc, #144]	; (8000928 <MX_GPIO_Init+0x274>)
 8000898:	f001 fef8 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800089c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ae:	2306      	movs	r3, #6
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481a      	ldr	r0, [pc, #104]	; (8000924 <MX_GPIO_Init+0x270>)
 80008ba:	f001 fee7 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <MX_GPIO_Init+0x274>)
 80008d2:	f001 fedb 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008dc:	2312      	movs	r3, #18
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e8:	2304      	movs	r3, #4
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <MX_GPIO_Init+0x27c>)
 80008f4:	f001 feca 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0x26c>)
 800090e:	f001 febd 	bl	800268c <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40020800 	.word	0x40020800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400

08000934 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t mailBoxNum = 0;

uint8_t bufferCmd[128];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	b093      	sub	sp, #76	; 0x4c
 8000938:	af0a      	add	r7, sp, #40	; 0x28
 800093a:	6178      	str	r0, [r7, #20]
	uint8_t sendLen;

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800093c:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800093e:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000940:	2100      	movs	r1, #0
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f001 f9f7 	bl	8001d36 <HAL_CAN_GetRxMessage>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d17b      	bne.n	8000a46 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
	{
	    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000954:	4840      	ldr	r0, [pc, #256]	; (8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000956:	f002 f931 	bl	8002bbc <HAL_GPIO_WritePin>

		if (RxHeader.IDE == CAN_ID_EXT){
 800095a:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d133      	bne.n	80009ca <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
				(unsigned int)RxHeader.ExtId, \
 8000962:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000964:	685a      	ldr	r2, [r3, #4]
				(unsigned int)RxHeader.DLC, \
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000968:	6919      	ldr	r1, [r3, #16]

				RxData[0], \
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 800096e:	4618      	mov	r0, r3
				RxData[1], \
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000972:	785b      	ldrb	r3, [r3, #1]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000974:	461c      	mov	r4, r3
				RxData[2], \
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000978:	789b      	ldrb	r3, [r3, #2]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 800097a:	461d      	mov	r5, r3
				RxData[3], \
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800097e:	78db      	ldrb	r3, [r3, #3]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000980:	461e      	mov	r6, r3
				RxData[4], \
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000984:	791b      	ldrb	r3, [r3, #4]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000986:	613b      	str	r3, [r7, #16]
				RxData[5], \
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800098a:	795b      	ldrb	r3, [r3, #5]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 800098c:	60fb      	str	r3, [r7, #12]
				RxData[6], \
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000990:	799b      	ldrb	r3, [r3, #6]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000992:	60bb      	str	r3, [r7, #8]
				RxData[7], \
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000996:	79db      	ldrb	r3, [r3, #7]
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000998:	607b      	str	r3, [r7, #4]
				(unsigned int)htim5.Instance->CNT);
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	        sendLen = sprintf((char*)bufferTextCan, "T%8.8X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009a0:	9308      	str	r3, [sp, #32]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	9307      	str	r3, [sp, #28]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	9306      	str	r3, [sp, #24]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	9305      	str	r3, [sp, #20]
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	9304      	str	r3, [sp, #16]
 80009b2:	9603      	str	r6, [sp, #12]
 80009b4:	9502      	str	r5, [sp, #8]
 80009b6:	9401      	str	r4, [sp, #4]
 80009b8:	9000      	str	r0, [sp, #0]
 80009ba:	460b      	mov	r3, r1
 80009bc:	4928      	ldr	r1, [pc, #160]	; (8000a60 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80009be:	4829      	ldr	r0, [pc, #164]	; (8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 80009c0:	f007 ffa8 	bl	8008914 <siprintf>
 80009c4:	4603      	mov	r3, r0
 80009c6:	77fb      	strb	r3, [r7, #31]
 80009c8:	e032      	b.n	8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
		}
		else{
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
				(unsigned int)RxHeader.ExtId, \
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80009cc:	685a      	ldr	r2, [r3, #4]
				(unsigned int)RxHeader.DLC, \
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80009d0:	6919      	ldr	r1, [r3, #16]

				RxData[0], \
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009d6:	4618      	mov	r0, r3
				RxData[1], \
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009da:	785b      	ldrb	r3, [r3, #1]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009dc:	461c      	mov	r4, r3
				RxData[2], \
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009e0:	789b      	ldrb	r3, [r3, #2]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009e2:	461d      	mov	r5, r3
				RxData[3], \
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009e6:	78db      	ldrb	r3, [r3, #3]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009e8:	461e      	mov	r6, r3
				RxData[4], \
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009ec:	791b      	ldrb	r3, [r3, #4]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009ee:	613b      	str	r3, [r7, #16]
				RxData[5], \
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009f2:	795b      	ldrb	r3, [r3, #5]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009f4:	60fb      	str	r3, [r7, #12]
				RxData[6], \
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009f8:	799b      	ldrb	r3, [r3, #6]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 80009fa:	60bb      	str	r3, [r7, #8]
				RxData[7], \
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80009fe:	79db      	ldrb	r3, [r3, #7]
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000a00:	607b      	str	r3, [r7, #4]
				(unsigned int)htim5.Instance->CNT);
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sendLen = sprintf((char*)bufferTextCan, "t%3.3X%1.1X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%4.4X\r", \
 8000a08:	9308      	str	r3, [sp, #32]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	9307      	str	r3, [sp, #28]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	9306      	str	r3, [sp, #24]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	9305      	str	r3, [sp, #20]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	9304      	str	r3, [sp, #16]
 8000a1a:	9603      	str	r6, [sp, #12]
 8000a1c:	9502      	str	r5, [sp, #8]
 8000a1e:	9401      	str	r4, [sp, #4]
 8000a20:	9000      	str	r0, [sp, #0]
 8000a22:	460b      	mov	r3, r1
 8000a24:	4910      	ldr	r1, [pc, #64]	; (8000a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8000a28:	f007 ff74 	bl	8008914 <siprintf>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	77fb      	strb	r3, [r7, #31]
		}

	    tim5cnt = htim5.Instance->CNT;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000a38:	6013      	str	r3, [r2, #0]
	    CDC_Transmit_FS(bufferTextCan, sendLen);
 8000a3a:	7ffb      	ldrb	r3, [r7, #31]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8000a42:	f007 facb 	bl	8007fdc <CDC_Transmit_FS>
	}
}
 8000a46:	bf00      	nop
 8000a48:	3724      	adds	r7, #36	; 0x24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200004f0 	.word	0x200004f0
 8000a54:	20000610 	.word	0x20000610
 8000a58:	40020c00 	.word	0x40020c00
 8000a5c:	2000062c 	.word	0x2000062c
 8000a60:	08009188 	.word	0x08009188
 8000a64:	200004f8 	.word	0x200004f8
 8000a68:	080091c4 	.word	0x080091c4
 8000a6c:	20000460 	.word	0x20000460

08000a70 <HexToHalfByte>:
  CONVERT_OK
}ConvertReturnType;


uint8_t HexToHalfByte(uint8_t hex)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if(hex >= '0' && hex <= '9')
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a7e:	d906      	bls.n	8000a8e <HexToHalfByte+0x1e>
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b39      	cmp	r3, #57	; 0x39
 8000a84:	d803      	bhi.n	8000a8e <HexToHalfByte+0x1e>
    return hex - '0';
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	3b30      	subs	r3, #48	; 0x30
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	e014      	b.n	8000ab8 <HexToHalfByte+0x48>
  else if(hex >= 'A' && hex <= 'F')
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b40      	cmp	r3, #64	; 0x40
 8000a92:	d906      	bls.n	8000aa2 <HexToHalfByte+0x32>
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b46      	cmp	r3, #70	; 0x46
 8000a98:	d803      	bhi.n	8000aa2 <HexToHalfByte+0x32>
    return 10 + (hex - 'A');
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	3b37      	subs	r3, #55	; 0x37
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	e00a      	b.n	8000ab8 <HexToHalfByte+0x48>
  else if(hex >= 'a' && hex <= 'f')
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b60      	cmp	r3, #96	; 0x60
 8000aa6:	d906      	bls.n	8000ab6 <HexToHalfByte+0x46>
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b66      	cmp	r3, #102	; 0x66
 8000aac:	d803      	bhi.n	8000ab6 <HexToHalfByte+0x46>
    return 10 + (hex - 'a');
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3b57      	subs	r3, #87	; 0x57
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	e000      	b.n	8000ab8 <HexToHalfByte+0x48>

  return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <IsHex>:

ConvertReturnType IsHex(uint8_t hex)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if((hex >= '0' && hex <= '9') || (hex >= 'A' && hex <= 'F') || (hex >= 'a' && hex <= 'b'))
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ad2:	d902      	bls.n	8000ada <IsHex+0x16>
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b39      	cmp	r3, #57	; 0x39
 8000ad8:	d90b      	bls.n	8000af2 <IsHex+0x2e>
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b40      	cmp	r3, #64	; 0x40
 8000ade:	d902      	bls.n	8000ae6 <IsHex+0x22>
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b46      	cmp	r3, #70	; 0x46
 8000ae4:	d905      	bls.n	8000af2 <IsHex+0x2e>
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b60      	cmp	r3, #96	; 0x60
 8000aea:	d904      	bls.n	8000af6 <IsHex+0x32>
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b62      	cmp	r3, #98	; 0x62
 8000af0:	d801      	bhi.n	8000af6 <IsHex+0x32>
    return CONVERT_OK;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <IsHex+0x34>

  return CONVERT_ERROR;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HexToByte>:


ConvertReturnType HexToByte(uint8_t * hex, uint8_t * data){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  *data = 0;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]

  for(uint8_t idx = 0; idx < 2; idx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e027      	b.n	8000b6a <HexToByte+0x66>
  {
    if(IsHex(hex[idx]) == CONVERT_ERROR)
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffce 	bl	8000ac4 <IsHex>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HexToByte+0x2e>
      return CONVERT_ERROR;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e01f      	b.n	8000b72 <HexToByte+0x6e>

    *data |= (HexToHalfByte(hex[idx]) & 0xF) << (4 * (1-idx));
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4413      	add	r3, r2
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff98 	bl	8000a70 <HexToHalfByte>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f003 020f 	and.w	r2, r3, #15
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f1c3 0301 	rsb	r3, r3, #1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	fa02 f103 	lsl.w	r1, r2, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b25a      	sxtb	r2, r3
 8000b58:	b24b      	sxtb	r3, r1
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	701a      	strb	r2, [r3, #0]
  for(uint8_t idx = 0; idx < 2; idx++)
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	3301      	adds	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d9d4      	bls.n	8000b1a <HexToByte+0x16>
  }

  return CONVERT_OK;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <FindSymbol>:

uint16_t FindSymbol(uint8_t * string, uint8_t symbol){
 8000b7a:	b480      	push	{r7}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	70fb      	strb	r3, [r7, #3]
  uint16_t index = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	81fb      	strh	r3, [r7, #14]

  while(*string != symbol)
 8000b8a:	e00d      	b.n	8000ba8 <FindSymbol+0x2e>
  {
    if(++index == 0xFFFF)
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d102      	bne.n	8000ba2 <FindSymbol+0x28>
      return 0xFFFF;
 8000b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba0:	e008      	b.n	8000bb4 <FindSymbol+0x3a>
    string++;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
  while(*string != symbol)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	78fa      	ldrb	r2, [r7, #3]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d1ec      	bne.n	8000b8c <FindSymbol+0x12>
  }

  return index;
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <CDC_Receive>:

void CDC_Receive(uint8_t* Buf, uint32_t *Len){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	uint8_t sendLen = 0, byte;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	75fb      	strb	r3, [r7, #23]
	uint32_t id;

	switch(Buf[0])
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3b43      	subs	r3, #67	; 0x43
 8000bd4:	2b33      	cmp	r3, #51	; 0x33
 8000bd6:	f200 8245 	bhi.w	8001064 <CDC_Receive+0x4a4>
 8000bda:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <CDC_Receive+0x20>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08001047 	.word	0x08001047
 8000be4:	08001065 	.word	0x08001065
 8000be8:	08001065 	.word	0x08001065
 8000bec:	08001065 	.word	0x08001065
 8000bf0:	08001065 	.word	0x08001065
 8000bf4:	08001065 	.word	0x08001065
 8000bf8:	08001065 	.word	0x08001065
 8000bfc:	08001065 	.word	0x08001065
 8000c00:	08001065 	.word	0x08001065
 8000c04:	08000cb1 	.word	0x08000cb1
 8000c08:	08001065 	.word	0x08001065
 8000c0c:	08001039 	.word	0x08001039
 8000c10:	08000cb9 	.word	0x08000cb9
 8000c14:	08001065 	.word	0x08001065
 8000c18:	08001065 	.word	0x08001065
 8000c1c:	08001065 	.word	0x08001065
 8000c20:	08000d17 	.word	0x08000d17
 8000c24:	08000e61 	.word	0x08000e61
 8000c28:	08001065 	.word	0x08001065
 8000c2c:	08000cfb 	.word	0x08000cfb
 8000c30:	08001065 	.word	0x08001065
 8000c34:	08001065 	.word	0x08001065
 8000c38:	08001065 	.word	0x08001065
 8000c3c:	08001065 	.word	0x08001065
 8000c40:	08001065 	.word	0x08001065
 8000c44:	08001065 	.word	0x08001065
 8000c48:	08001065 	.word	0x08001065
 8000c4c:	08001065 	.word	0x08001065
 8000c50:	08001065 	.word	0x08001065
 8000c54:	08001065 	.word	0x08001065
 8000c58:	08001065 	.word	0x08001065
 8000c5c:	08001065 	.word	0x08001065
 8000c60:	08001065 	.word	0x08001065
 8000c64:	08001065 	.word	0x08001065
 8000c68:	08001065 	.word	0x08001065
 8000c6c:	08001065 	.word	0x08001065
 8000c70:	08001065 	.word	0x08001065
 8000c74:	08001065 	.word	0x08001065
 8000c78:	08001065 	.word	0x08001065
 8000c7c:	08001065 	.word	0x08001065
 8000c80:	08001065 	.word	0x08001065
 8000c84:	08001065 	.word	0x08001065
 8000c88:	08001065 	.word	0x08001065
 8000c8c:	08001065 	.word	0x08001065
 8000c90:	08001065 	.word	0x08001065
 8000c94:	08001065 	.word	0x08001065
 8000c98:	08001065 	.word	0x08001065
 8000c9c:	08001065 	.word	0x08001065
 8000ca0:	08001065 	.word	0x08001065
 8000ca4:	08000f85 	.word	0x08000f85
 8000ca8:	08001065 	.word	0x08001065
 8000cac:	08000d09 	.word	0x08000d09
	{
	  case 'L':
	    hcan1.Init.Mode = CAN_MODE_SILENT;
 8000cb0:	4baa      	ldr	r3, [pc, #680]	; (8000f5c <CDC_Receive+0x39c>)
 8000cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cb6:	609a      	str	r2, [r3, #8]
	  case 'O':
	    ticStartLog = HAL_GetTick();
 8000cb8:	f000 fc72 	bl	80015a0 <HAL_GetTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4aa8      	ldr	r2, [pc, #672]	; (8000f60 <CDC_Receive+0x3a0>)
 8000cc0:	6013      	str	r3, [r2, #0]

	    htim5.Instance->CNT = 0;
 8000cc2:	4ba8      	ldr	r3, [pc, #672]	; (8000f64 <CDC_Receive+0x3a4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_TIM_Base_Start(&htim5);
 8000cca:	48a6      	ldr	r0, [pc, #664]	; (8000f64 <CDC_Receive+0x3a4>)
 8000ccc:	f003 fdae 	bl	800482c <HAL_TIM_Base_Start>

	    while (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cd0:	e005      	b.n	8000cde <CDC_Receive+0x11e>
	    {
	      HAL_CAN_DeInit(&hcan1);
 8000cd2:	48a2      	ldr	r0, [pc, #648]	; (8000f5c <CDC_Receive+0x39c>)
 8000cd4:	f000 fd8f 	bl	80017f6 <HAL_CAN_DeInit>
	      HAL_Delay(100);
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f000 fc6d 	bl	80015b8 <HAL_Delay>
	    while (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cde:	489f      	ldr	r0, [pc, #636]	; (8000f5c <CDC_Receive+0x39c>)
 8000ce0:	f000 fc8e 	bl	8001600 <HAL_CAN_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f3      	bne.n	8000cd2 <CDC_Receive+0x112>
	    }

	    HAL_CAN_Start(&hcan1);
 8000cea:	489c      	ldr	r0, [pc, #624]	; (8000f5c <CDC_Receive+0x39c>)
 8000cec:	f000 fe86 	bl	80019fc <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	489a      	ldr	r0, [pc, #616]	; (8000f5c <CDC_Receive+0x39c>)
 8000cf4:	f001 f931 	bl	8001f5a <HAL_CAN_ActivateNotification>
	    break;
 8000cf8:	e1bb      	b.n	8001072 <CDC_Receive+0x4b2>

	  case 'V':
	    sendLen = sprintf((char*)bufferCmd,"V0101\r");
 8000cfa:	499b      	ldr	r1, [pc, #620]	; (8000f68 <CDC_Receive+0x3a8>)
 8000cfc:	489b      	ldr	r0, [pc, #620]	; (8000f6c <CDC_Receive+0x3ac>)
 8000cfe:	f007 fe09 	bl	8008914 <siprintf>
 8000d02:	4603      	mov	r3, r0
 8000d04:	75fb      	strb	r3, [r7, #23]
	    break;
 8000d06:	e1b4      	b.n	8001072 <CDC_Receive+0x4b2>

	  case 'v':
	    sendLen = sprintf((char*)bufferCmd,"CanSee\r");
 8000d08:	4999      	ldr	r1, [pc, #612]	; (8000f70 <CDC_Receive+0x3b0>)
 8000d0a:	4898      	ldr	r0, [pc, #608]	; (8000f6c <CDC_Receive+0x3ac>)
 8000d0c:	f007 fe02 	bl	8008914 <siprintf>
 8000d10:	4603      	mov	r3, r0
 8000d12:	75fb      	strb	r3, [r7, #23]
	    break;
 8000d14:	e1ad      	b.n	8001072 <CDC_Receive+0x4b2>

	  case 'S':
	    switch(Buf[1])
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	3b30      	subs	r3, #48	; 0x30
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	f200 81a2 	bhi.w	8001068 <CDC_Receive+0x4a8>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <CDC_Receive+0x16c>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d6f 	.word	0x08000d6f
 8000d34:	08000d8d 	.word	0x08000d8d
 8000d38:	08000dab 	.word	0x08000dab
 8000d3c:	08000dc9 	.word	0x08000dc9
 8000d40:	08000de7 	.word	0x08000de7
 8000d44:	08000e05 	.word	0x08000e05
 8000d48:	08000e23 	.word	0x08000e23
 8000d4c:	08000e41 	.word	0x08000e41
	    {
	    // 10k = 110k
	    case '0':
	      hcan1.Init.Prescaler = 13;
 8000d50:	4b82      	ldr	r3, [pc, #520]	; (8000f5c <CDC_Receive+0x39c>)
 8000d52:	220d      	movs	r2, #13
 8000d54:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d56:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <CDC_Receive+0x39c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000d5c:	4b7f      	ldr	r3, [pc, #508]	; (8000f5c <CDC_Receive+0x39c>)
 8000d5e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000d62:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000d64:	4b7d      	ldr	r3, [pc, #500]	; (8000f5c <CDC_Receive+0x39c>)
 8000d66:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000d6a:	615a      	str	r2, [r3, #20]
	      break;
 8000d6c:	e077      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 20k
	    case '1':
	      hcan1.Init.Prescaler = 150;
 8000d6e:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <CDC_Receive+0x39c>)
 8000d70:	2296      	movs	r2, #150	; 0x96
 8000d72:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d74:	4b79      	ldr	r3, [pc, #484]	; (8000f5c <CDC_Receive+0x39c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000d7a:	4b78      	ldr	r3, [pc, #480]	; (8000f5c <CDC_Receive+0x39c>)
 8000d7c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000d80:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000d82:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <CDC_Receive+0x39c>)
 8000d84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d88:	615a      	str	r2, [r3, #20]
	      break;
 8000d8a:	e068      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 50k
	    case '2':
	      hcan1.Init.Prescaler = 72;
 8000d8c:	4b73      	ldr	r3, [pc, #460]	; (8000f5c <CDC_Receive+0x39c>)
 8000d8e:	2248      	movs	r2, #72	; 0x48
 8000d90:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <CDC_Receive+0x39c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000d98:	4b70      	ldr	r3, [pc, #448]	; (8000f5c <CDC_Receive+0x39c>)
 8000d9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d9e:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000da0:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <CDC_Receive+0x39c>)
 8000da2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000da6:	615a      	str	r2, [r3, #20]
	      break;
 8000da8:	e059      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 100k
	    case '3':
	      hcan1.Init.Prescaler = 36;
 8000daa:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <CDC_Receive+0x39c>)
 8000dac:	2224      	movs	r2, #36	; 0x24
 8000dae:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000db0:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <CDC_Receive+0x39c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000db6:	4b69      	ldr	r3, [pc, #420]	; (8000f5c <CDC_Receive+0x39c>)
 8000db8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dbc:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000dbe:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <CDC_Receive+0x39c>)
 8000dc0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000dc4:	615a      	str	r2, [r3, #20]
	      break;
 8000dc6:	e04a      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 125k
	    case '4':
	      hcan1.Init.Prescaler = 32;
 8000dc8:	4b64      	ldr	r3, [pc, #400]	; (8000f5c <CDC_Receive+0x39c>)
 8000dca:	2220      	movs	r2, #32
 8000dcc:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dce:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <CDC_Receive+0x39c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <CDC_Receive+0x39c>)
 8000dd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dda:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ddc:	4b5f      	ldr	r3, [pc, #380]	; (8000f5c <CDC_Receive+0x39c>)
 8000dde:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000de2:	615a      	str	r2, [r3, #20]
	      break;
 8000de4:	e03b      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 250k
	    case '5':
	      hcan1.Init.Prescaler = 16;
 8000de6:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <CDC_Receive+0x39c>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dec:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <CDC_Receive+0x39c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <CDC_Receive+0x39c>)
 8000df4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000df8:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000dfa:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <CDC_Receive+0x39c>)
 8000dfc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000e00:	615a      	str	r2, [r3, #20]
	      break;
 8000e02:	e02c      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 500k
	    case '6':
	      hcan1.Init.Prescaler = 8;
 8000e04:	4b55      	ldr	r3, [pc, #340]	; (8000f5c <CDC_Receive+0x39c>)
 8000e06:	2208      	movs	r2, #8
 8000e08:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e0a:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <CDC_Receive+0x39c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <CDC_Receive+0x39c>)
 8000e12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e16:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e18:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <CDC_Receive+0x39c>)
 8000e1a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000e1e:	615a      	str	r2, [r3, #20]
	      break;
 8000e20:	e01d      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 800k
	    case '7':
	      hcan1.Init.Prescaler = 5;
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <CDC_Receive+0x39c>)
 8000e24:	2205      	movs	r2, #5
 8000e26:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <CDC_Receive+0x39c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <CDC_Receive+0x39c>)
 8000e30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e34:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e36:	4b49      	ldr	r3, [pc, #292]	; (8000f5c <CDC_Receive+0x39c>)
 8000e38:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000e3c:	615a      	str	r2, [r3, #20]
	      break;
 8000e3e:	e00e      	b.n	8000e5e <CDC_Receive+0x29e>
	    // 1000k
	    case '8':
	      hcan1.Init.Prescaler = 4;
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <CDC_Receive+0x39c>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	605a      	str	r2, [r3, #4]
	      hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e46:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <CDC_Receive+0x39c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
	      hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <CDC_Receive+0x39c>)
 8000e4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e52:	611a      	str	r2, [r3, #16]
	      hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000e54:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <CDC_Receive+0x39c>)
 8000e56:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000e5a:	615a      	str	r2, [r3, #20]
	      break;
 8000e5c:	bf00      	nop
	    }
	    break;
 8000e5e:	e103      	b.n	8001068 <CDC_Receive+0x4a8>

	  case 'T':
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e66:	4843      	ldr	r0, [pc, #268]	; (8000f74 <CDC_Receive+0x3b4>)
 8000e68:	f001 fea8 	bl	8002bbc <HAL_GPIO_WritePin>

	    if(FindSymbol(Buf, '\r') <= 26)
 8000e6c:	210d      	movs	r1, #13
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fe83 	bl	8000b7a <FindSymbol>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b1a      	cmp	r3, #26
 8000e78:	f200 80f8 	bhi.w	800106c <CDC_Receive+0x4ac>
	    {
	      TxHeader.IDE = CAN_ID_EXT;
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <CDC_Receive+0x3b8>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	609a      	str	r2, [r3, #8]

	      HexToByte(&Buf[1], &byte);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3301      	adds	r3, #1
 8000e86:	f107 020f 	add.w	r2, r7, #15
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe39 	bl	8000b04 <HexToByte>
	      id = byte << 24;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	061b      	lsls	r3, r3, #24
 8000e96:	613b      	str	r3, [r7, #16]
	      HexToByte(&Buf[3], &byte);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	f107 020f 	add.w	r2, r7, #15
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe2e 	bl	8000b04 <HexToByte>
	      id |= byte << 16;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	041b      	lsls	r3, r3, #16
 8000eac:	461a      	mov	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
	      HexToByte(&Buf[5], &byte);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3305      	adds	r3, #5
 8000eb8:	f107 020f 	add.w	r2, r7, #15
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fe20 	bl	8000b04 <HexToByte>
	      id |= byte << 8;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	461a      	mov	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
	      HexToByte(&Buf[7], &byte);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	f107 020f 	add.w	r2, r7, #15
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe12 	bl	8000b04 <HexToByte>
	      id |= byte;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
	      TxHeader.ExtId = id;
 8000eea:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <CDC_Receive+0x3b8>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	6053      	str	r3, [r2, #4]

	      HexToByte(&Buf[8], &byte);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	f107 020f 	add.w	r2, r7, #15
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe02 	bl	8000b04 <HexToByte>
	      TxHeader.DLC = byte & 0x0F;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <CDC_Receive+0x3b8>)
 8000f08:	6113      	str	r3, [r2, #16]

	      for(uint8_t idx = 0; idx < TxHeader.DLC; idx ++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75bb      	strb	r3, [r7, #22]
 8000f0e:	e012      	b.n	8000f36 <CDC_Receive+0x376>
	      {
	        HexToByte(&Buf[10 + (idx * 2)], &byte);
 8000f10:	7dbb      	ldrb	r3, [r7, #22]
 8000f12:	3305      	adds	r3, #5
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f107 020f 	add.w	r2, r7, #15
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fdee 	bl	8000b04 <HexToByte>
	        TxData[idx] = byte;
 8000f28:	7dbb      	ldrb	r3, [r7, #22]
 8000f2a:	7bf9      	ldrb	r1, [r7, #15]
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <CDC_Receive+0x3bc>)
 8000f2e:	54d1      	strb	r1, [r2, r3]
	      for(uint8_t idx = 0; idx < TxHeader.DLC; idx ++)
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	3301      	adds	r3, #1
 8000f34:	75bb      	strb	r3, [r7, #22]
 8000f36:	7dba      	ldrb	r2, [r7, #22]
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <CDC_Receive+0x3b8>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3e7      	bcc.n	8000f10 <CDC_Receive+0x350>
	      }

	      if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <CDC_Receive+0x39c>)
 8000f42:	f000 fec3 	bl	8001ccc <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 808f 	beq.w	800106c <CDC_Receive+0x4ac>
	        HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &mailBoxNum);
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <CDC_Receive+0x3c0>)
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <CDC_Receive+0x3bc>)
 8000f52:	4909      	ldr	r1, [pc, #36]	; (8000f78 <CDC_Receive+0x3b8>)
 8000f54:	4801      	ldr	r0, [pc, #4]	; (8000f5c <CDC_Receive+0x39c>)
 8000f56:	f000 fdde 	bl	8001b16 <HAL_CAN_AddTxMessage>
	    }
	    break;
 8000f5a:	e087      	b.n	800106c <CDC_Receive+0x4ac>
 8000f5c:	20000434 	.word	0x20000434
 8000f60:	2000045c 	.word	0x2000045c
 8000f64:	2000062c 	.word	0x2000062c
 8000f68:	08009200 	.word	0x08009200
 8000f6c:	2000046c 	.word	0x2000046c
 8000f70:	08009208 	.word	0x08009208
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	200005f8 	.word	0x200005f8
 8000f7c:	20000464 	.word	0x20000464
 8000f80:	20000200 	.word	0x20000200

	  case 't':
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8a:	4845      	ldr	r0, [pc, #276]	; (80010a0 <CDC_Receive+0x4e0>)
 8000f8c:	f001 fe16 	bl	8002bbc <HAL_GPIO_WritePin>

	    if(FindSymbol(Buf, '\r') <= 26)
 8000f90:	210d      	movs	r1, #13
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fdf1 	bl	8000b7a <FindSymbol>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b1a      	cmp	r3, #26
 8000f9c:	d868      	bhi.n	8001070 <CDC_Receive+0x4b0>
	    {
	      TxHeader.IDE = CAN_ID_STD;
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <CDC_Receive+0x4e4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]

	      HexToByte(&Buf[1], &byte);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f107 020f 	add.w	r2, r7, #15
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fda8 	bl	8000b04 <HexToByte>
	      id = byte << 4;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
	      HexToByte(&Buf[3], &byte);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	f107 020f 	add.w	r2, r7, #15
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fd9d 	bl	8000b04 <HexToByte>
	      id |= byte >> 4;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
	      TxHeader.StdId = id;
 8000fd8:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <CDC_Receive+0x4e4>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6013      	str	r3, [r2, #0]

	      TxHeader.DLC = byte & 0x0F;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <CDC_Receive+0x4e4>)
 8000fe6:	6113      	str	r3, [r2, #16]

	      for(uint8_t idx = 0; idx < TxHeader.DLC; idx ++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	757b      	strb	r3, [r7, #21]
 8000fec:	e012      	b.n	8001014 <CDC_Receive+0x454>
	      {
	        HexToByte(&Buf[5 + (idx * 2)], &byte);
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	3305      	adds	r3, #5
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f107 020f 	add.w	r2, r7, #15
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fd7f 	bl	8000b04 <HexToByte>
	        TxData[idx] = byte;
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	7bf9      	ldrb	r1, [r7, #15]
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <CDC_Receive+0x4e8>)
 800100c:	54d1      	strb	r1, [r2, r3]
	      for(uint8_t idx = 0; idx < TxHeader.DLC; idx ++)
 800100e:	7d7b      	ldrb	r3, [r7, #21]
 8001010:	3301      	adds	r3, #1
 8001012:	757b      	strb	r3, [r7, #21]
 8001014:	7d7a      	ldrb	r2, [r7, #21]
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <CDC_Receive+0x4e4>)
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3e7      	bcc.n	8000fee <CDC_Receive+0x42e>
	      }

	      if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 800101e:	4823      	ldr	r0, [pc, #140]	; (80010ac <CDC_Receive+0x4ec>)
 8001020:	f000 fe54 	bl	8001ccc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d022      	beq.n	8001070 <CDC_Receive+0x4b0>
	        HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &mailBoxNum);
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <CDC_Receive+0x4f0>)
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <CDC_Receive+0x4e8>)
 800102e:	491d      	ldr	r1, [pc, #116]	; (80010a4 <CDC_Receive+0x4e4>)
 8001030:	481e      	ldr	r0, [pc, #120]	; (80010ac <CDC_Receive+0x4ec>)
 8001032:	f000 fd70 	bl	8001b16 <HAL_CAN_AddTxMessage>
	    }
	    break;
 8001036:	e01b      	b.n	8001070 <CDC_Receive+0x4b0>

	  case 's':
	    break;

	  case 'N':
	    sendLen = sprintf((char*)bufferCmd,"N9876\r");
 8001038:	491e      	ldr	r1, [pc, #120]	; (80010b4 <CDC_Receive+0x4f4>)
 800103a:	481f      	ldr	r0, [pc, #124]	; (80010b8 <CDC_Receive+0x4f8>)
 800103c:	f007 fc6a 	bl	8008914 <siprintf>
 8001040:	4603      	mov	r3, r0
 8001042:	75fb      	strb	r3, [r7, #23]
	    break;
 8001044:	e015      	b.n	8001072 <CDC_Receive+0x4b2>

	  case 'R':
	    break;

	  case 'C':
	    if(Buf[1] == '\r')
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3301      	adds	r3, #1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b0d      	cmp	r3, #13
 800104e:	d109      	bne.n	8001064 <CDC_Receive+0x4a4>
	    {
	      hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <CDC_Receive+0x4ec>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
	      HAL_CAN_DeInit(&hcan1);
 8001056:	4815      	ldr	r0, [pc, #84]	; (80010ac <CDC_Receive+0x4ec>)
 8001058:	f000 fbcd 	bl	80017f6 <HAL_CAN_DeInit>
	      HAL_TIM_Base_Stop(&htim5);
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <CDC_Receive+0x4fc>)
 800105e:	f003 fc4d 	bl	80048fc <HAL_TIM_Base_Stop>

	      break;
 8001062:	e006      	b.n	8001072 <CDC_Receive+0x4b2>
	    }

	  default:
	    break;
 8001064:	bf00      	nop
 8001066:	e004      	b.n	8001072 <CDC_Receive+0x4b2>
	    break;
 8001068:	bf00      	nop
 800106a:	e002      	b.n	8001072 <CDC_Receive+0x4b2>
	    break;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <CDC_Receive+0x4b2>
	    break;
 8001070:	bf00      	nop
	  }

	  if(sendLen > 0)
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <CDC_Receive+0x4ca>
	  {
	    CDC_Transmit_FS(bufferCmd, sendLen);
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	b29b      	uxth	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <CDC_Receive+0x4f8>)
 8001080:	f006 ffac 	bl	8007fdc <CDC_Transmit_FS>
	    sendLen = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
	  else
	  {
	    CDC_Transmit_FS(Buf, *Len);
	  }

}
 8001088:	e006      	b.n	8001098 <CDC_Receive+0x4d8>
	    CDC_Transmit_FS(Buf, *Len);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f006 ffa2 	bl	8007fdc <CDC_Transmit_FS>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	200005f8 	.word	0x200005f8
 80010a8:	20000464 	.word	0x20000464
 80010ac:	20000434 	.word	0x20000434
 80010b0:	20000200 	.word	0x20000200
 80010b4:	08009210 	.word	0x08009210
 80010b8:	2000046c 	.word	0x2000046c
 80010bc:	2000062c 	.word	0x2000062c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 fa05 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f84d 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f7ff faf1 	bl	80006b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80010d2:	f7ff fa49 	bl	8000568 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 80010d6:	f006 febf 	bl	8007e58 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80010da:	f000 f961 	bl	80013a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterActivation = ENABLE;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]

  sFilterConfig.FilterBank = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <main+0x9c>)
 8001108:	f000 fb98 	bl	800183c <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <main+0x56>
  {
    Error_Handler();
 8001112:	f000 f891 	bl	8001238 <Error_Handler>
  }

  HAL_CAN_Start(&hcan1);
 8001116:	4811      	ldr	r0, [pc, #68]	; (800115c <main+0x9c>)
 8001118:	f000 fc70 	bl	80019fc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 800111c:	2102      	movs	r1, #2
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <main+0x9c>)
 8001120:	f000 ff1b 	bl	8001f5a <HAL_CAN_ActivateNotification>

  TxHeader.ExtId = 0x123;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <main+0xa0>)
 8001126:	f240 1223 	movw	r2, #291	; 0x123
 800112a:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <main+0xa0>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <main+0xa0>)
 8001134:	2208      	movs	r2, #8
 8001136:	611a      	str	r2, [r3, #16]
  TxHeader.RTR = CAN_RTR_DATA;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <main+0xa0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <main+0xa0>)
 8001140:	2200      	movs	r2, #0
 8001142:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f000 fa36 	bl	80015b8 <HAL_Delay>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <main+0xa4>)
 8001154:	f001 fd32 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001158:	e7f4      	b.n	8001144 <main+0x84>
 800115a:	bf00      	nop
 800115c:	20000434 	.word	0x20000434
 8001160:	200005f8 	.word	0x200005f8
 8001164:	40020c00 	.word	0x40020c00

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fbc4 	bl	8008904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <SystemClock_Config+0xc8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <SystemClock_Config+0xc8>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SystemClock_Config+0xc8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <SystemClock_Config+0xcc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <SystemClock_Config+0xcc>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <SystemClock_Config+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011dc:	2348      	movs	r3, #72	; 0x48
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011e4:	2303      	movs	r3, #3
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fe81 	bl	8003ef4 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 f81e 	bl	8001238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f003 f8e3 	bl	80043e4 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001224:	f000 f808 	bl	8001238 <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	; 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_MspInit+0x4c>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x4c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001282:	2007      	movs	r0, #7
 8001284:	f001 f9b2 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f94a 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <CAN1_RX0_IRQHandler+0x10>)
 80012ee:	f000 fe5a 	bl	8001fa6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000434 	.word	0x20000434

080012fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <OTG_FS_IRQHandler+0x10>)
 8001302:	f001 fdc4 	bl	8002e8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20001b48 	.word	0x20001b48

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f007 fab6 	bl	80088b0 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20020000 	.word	0x20020000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000204 	.word	0x20000204
 8001378:	20001f60 	.word	0x20001f60

0800137c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_TIM5_Init+0x94>)
 80013be:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <MX_TIM5_Init+0x98>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 35999;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_TIM5_Init+0x94>)
 80013c4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80013c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_TIM5_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_TIM5_Init+0x94>)
 80013d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_TIM5_Init+0x94>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_TIM5_Init+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013e4:	4813      	ldr	r0, [pc, #76]	; (8001434 <MX_TIM5_Init+0x94>)
 80013e6:	f003 f9d1 	bl	800478c <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013f0:	f7ff ff22 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_TIM5_Init+0x94>)
 8001402:	f003 faa2 	bl	800494a <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800140c:	f7ff ff14 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_TIM5_Init+0x94>)
 800141e:	f003 fc95 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001428:	f7ff ff06 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000062c 	.word	0x2000062c
 8001438:	40000c00 	.word	0x40000c00

0800143c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_TIM_Base_MspInit+0x3c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10d      	bne.n	800146a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_TIM_Base_MspInit+0x40>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x40>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <HAL_TIM_Base_MspInit+0x40>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40000c00 	.word	0x40000c00
 800147c:	40023800 	.word	0x40023800

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ff67 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f007 fa05 	bl	80088bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fe05 	bl	80010c0 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80014c4:	080092b4 	.word	0x080092b4
  ldr r2, =_sbss
 80014c8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80014cc:	20001f60 	.word	0x20001f60

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f001 f875 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fe9c 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f001 f89b 	bl	8002672 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f001 f855 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	20000674 	.word	0x20000674

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000674 	.word	0x20000674

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0ed      	b.n	80017ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7fe ffd8 	bl	80005d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff ffb4 	bl	80015a0 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800163a:	e012      	b.n	8001662 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800163c:	f7ff ffb0 	bl	80015a0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d90b      	bls.n	8001662 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0c5      	b.n	80017ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0e5      	beq.n	800163c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0202 	bic.w	r2, r2, #2
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff ff8e 	bl	80015a0 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff ff8a 	bl	80015a0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e09f      	b.n	80017ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e5      	bne.n	8001688 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7e5b      	ldrb	r3, [r3, #25]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e007      	b.n	8001710 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800170e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e9b      	ldrb	r3, [r3, #26]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0220 	bic.w	r2, r2, #32
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7edb      	ldrb	r3, [r3, #27]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0210 	bic.w	r2, r2, #16
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0210 	orr.w	r2, r2, #16
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7f1b      	ldrb	r3, [r3, #28]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e007      	b.n	800178e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0208 	bic.w	r2, r2, #8
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f5b      	ldrb	r3, [r3, #29]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0204 	orr.w	r2, r2, #4
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	ea42 0103 	orr.w	r1, r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e015      	b.n	8001834 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f93b 	bl	8001a84 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe ff30 	bl	8000674 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001822:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001852:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d003      	beq.n	8001862 <HAL_CAN_ConfigFilter+0x26>
 800185a:	7cfb      	ldrb	r3, [r7, #19]
 800185c:	2b02      	cmp	r3, #2
 800185e:	f040 80be 	bne.w	80019de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001864:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800187c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	431a      	orrs	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2201      	movs	r2, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	401a      	ands	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d123      	bne.n	800190c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3248      	adds	r2, #72	; 0x48
 80018ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001900:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	3348      	adds	r3, #72	; 0x48
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d122      	bne.n	800195a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	431a      	orrs	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001934:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3248      	adds	r2, #72	; 0x48
 800193a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800194e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001950:	6979      	ldr	r1, [r7, #20]
 8001952:	3348      	adds	r3, #72	; 0x48
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	401a      	ands	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001974:	e007      	b.n	8001986 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	431a      	orrs	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019a0:	e007      	b.n	80019b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019d0:	f023 0201 	bic.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e006      	b.n	80019ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40006400 	.word	0x40006400

080019fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d12e      	bne.n	8001a6e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff fdba 	bl	80015a0 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a2e:	e012      	b.n	8001a56 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a30:	f7ff fdb6 	bl	80015a0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d90b      	bls.n	8001a56 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e012      	b.n	8001a7c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e5      	bne.n	8001a30 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e006      	b.n	8001a7c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d133      	bne.n	8001b00 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff fd7a 	bl	80015a0 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aae:	e012      	b.n	8001ad6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab0:	f7ff fd76 	bl	80015a0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d90b      	bls.n	8001ad6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2205      	movs	r2, #5
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e01b      	b.n	8001b0e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0e5      	beq.n	8001ab0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0202 	bic.w	r2, r2, #2
 8001af2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e006      	b.n	8001b0e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
  }
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b089      	sub	sp, #36	; 0x24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d003      	beq.n	8001b42 <HAL_CAN_AddTxMessage+0x2c>
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	f040 80b8 	bne.w	8001cb2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a0 	beq.w	8001ca2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	0e1b      	lsrs	r3, r3, #24
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d907      	bls.n	8001b82 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e09e      	b.n	8001cc0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b9e:	68f9      	ldr	r1, [r7, #12]
 8001ba0:	6809      	ldr	r1, [r1, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	440b      	add	r3, r1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00f      	b.n	8001bd0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bc4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3318      	adds	r3, #24
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	440b      	add	r3, r1
 8001bce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3318      	adds	r3, #24
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	440b      	add	r3, r1
 8001be0:	3304      	adds	r3, #4
 8001be2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	7d1b      	ldrb	r3, [r3, #20]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d111      	bne.n	8001c10 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3318      	adds	r3, #24
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	6811      	ldr	r1, [r2, #0]
 8001c00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3318      	adds	r3, #24
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3307      	adds	r3, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	061a      	lsls	r2, r3, #24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3305      	adds	r3, #5
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	3204      	adds	r2, #4
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4610      	mov	r0, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	ea43 0200 	orr.w	r2, r3, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3303      	adds	r3, #3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	061a      	lsls	r2, r3, #24
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3302      	adds	r3, #2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	4313      	orrs	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	4610      	mov	r0, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	6811      	ldr	r1, [r2, #0]
 8001c6e:	ea43 0200 	orr.w	r2, r3, r0
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	440b      	add	r3, r1
 8001c78:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3318      	adds	r3, #24
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3318      	adds	r3, #24
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	440b      	add	r3, r1
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e00e      	b.n	8001cc0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e006      	b.n	8001cc0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3724      	adds	r7, #36	; 0x24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cde:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d002      	beq.n	8001cec <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d11d      	bne.n	8001d28 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001d28:	68fb      	ldr	r3, [r7, #12]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d36:	b480      	push	{r7}
 8001d38:	b087      	sub	sp, #28
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d003      	beq.n	8001d5a <HAL_CAN_GetRxMessage+0x24>
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	f040 80f3 	bne.w	8001f40 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10e      	bne.n	8001d7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0e7      	b.n	8001f4e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d8      	b.n	8001f4e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	331b      	adds	r3, #27
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0204 	and.w	r2, r3, #4
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	331b      	adds	r3, #27
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0d5b      	lsrs	r3, r3, #21
 8001dca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	331b      	adds	r3, #27
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	331b      	adds	r3, #27
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0202 	and.w	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	331b      	adds	r3, #27
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	331b      	adds	r3, #27
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	331b      	adds	r3, #27
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0a1a      	lsrs	r2, r3, #8
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0c1a      	lsrs	r2, r3, #16
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3302      	adds	r3, #2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e1a      	lsrs	r2, r3, #24
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0a1a      	lsrs	r2, r3, #8
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3305      	adds	r3, #5
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0c1a      	lsrs	r2, r3, #16
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0e1a      	lsrs	r2, r3, #24
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	3307      	adds	r3, #7
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0220 	orr.w	r2, r2, #32
 8001f3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e006      	b.n	8001f4e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d002      	beq.n	8001f78 <HAL_CAN_ActivateNotification+0x1e>
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d109      	bne.n	8001f8c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6959      	ldr	r1, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e006      	b.n	8001f9a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08a      	sub	sp, #40	; 0x28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d07c      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d023      	beq.n	800203e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f983 	bl	8002314 <HAL_CAN_TxMailbox0CompleteCallback>
 800200e:	e016      	b.n	800203e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e00c      	b.n	800203e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	e002      	b.n	800203e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f989 	bl	8002350 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d024      	beq.n	8002092 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002050:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f963 	bl	8002328 <HAL_CAN_TxMailbox1CompleteCallback>
 8002062:	e016      	b.n	8002092 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	e00c      	b.n	8002092 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e002      	b.n	8002092 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f969 	bl	8002364 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d024      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f943 	bl	800233c <HAL_CAN_TxMailbox2CompleteCallback>
 80020b6:	e016      	b.n	80020e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	e00c      	b.n	80020e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	e002      	b.n	80020e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f949 	bl	8002378 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00c      	beq.n	800210a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002100:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f930 	bl	800238c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe fbf5 	bl	8000934 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002164:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2210      	movs	r2, #16
 800216c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2208      	movs	r2, #8
 8002188:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f912 	bl	80023b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8f9 	bl	80023a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00b      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2210      	movs	r2, #16
 80021c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8fc 	bl	80023c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2208      	movs	r2, #8
 80021ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f8f5 	bl	80023dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d07b      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d072      	beq.n	80022ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002260:	2b00      	cmp	r3, #0
 8002262:	d043      	beq.n	80022ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03e      	beq.n	80022ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002274:	2b60      	cmp	r3, #96	; 0x60
 8002276:	d02b      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x32a>
 8002278:	2b60      	cmp	r3, #96	; 0x60
 800227a:	d82e      	bhi.n	80022da <HAL_CAN_IRQHandler+0x334>
 800227c:	2b50      	cmp	r3, #80	; 0x50
 800227e:	d022      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x320>
 8002280:	2b50      	cmp	r3, #80	; 0x50
 8002282:	d82a      	bhi.n	80022da <HAL_CAN_IRQHandler+0x334>
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d019      	beq.n	80022bc <HAL_CAN_IRQHandler+0x316>
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d826      	bhi.n	80022da <HAL_CAN_IRQHandler+0x334>
 800228c:	2b30      	cmp	r3, #48	; 0x30
 800228e:	d010      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x30c>
 8002290:	2b30      	cmp	r3, #48	; 0x30
 8002292:	d822      	bhi.n	80022da <HAL_CAN_IRQHandler+0x334>
 8002294:	2b10      	cmp	r3, #16
 8002296:	d002      	beq.n	800229e <HAL_CAN_IRQHandler+0x2f8>
 8002298:	2b20      	cmp	r3, #32
 800229a:	d005      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800229c:	e01d      	b.n	80022da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a6:	e019      	b.n	80022dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b0:	e014      	b.n	80022dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f043 0320 	orr.w	r3, r3, #32
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ba:	e00f      	b.n	80022dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022c4:	e00a      	b.n	80022dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022ce:	e005      	b.n	80022dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022d8:	e000      	b.n	80022dc <HAL_CAN_IRQHandler+0x336>
            break;
 80022da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2204      	movs	r2, #4
 80022f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f872 	bl	80023f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db12      	blt.n	80024dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	490a      	ldr	r1, [pc, #40]	; (80024e8 <__NVIC_DisableIRQ+0x44>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	3320      	adds	r3, #32
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024d0:	f3bf 8f4f 	dsb	sy
}
 80024d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024d6:	f3bf 8f6f 	isb	sy
}
 80024da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff05 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff1a 	bl	800244c <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff0d 	bl	8002468 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff1d 	bl	80024a4 <__NVIC_DisableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ff94 	bl	80025a8 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e16b      	b.n	8002980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 815a 	bne.w	800297a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80b4 	beq.w	800297a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b60      	ldr	r3, [pc, #384]	; (8002998 <HAL_GPIO_Init+0x30c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a5f      	ldr	r2, [pc, #380]	; (8002998 <HAL_GPIO_Init+0x30c>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <HAL_GPIO_Init+0x30c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a5b      	ldr	r2, [pc, #364]	; (800299c <HAL_GPIO_Init+0x310>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x314>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_GPIO_Init+0x318>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d025      	beq.n	80028ae <HAL_GPIO_Init+0x222>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_GPIO_Init+0x31c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <HAL_GPIO_Init+0x21e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x320>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x21a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_Init+0x324>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x216>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x328>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x212>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x32c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_GPIO_Init+0x330>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x20a>
 8002892:	2307      	movs	r3, #7
 8002894:	e00e      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 8002896:	2308      	movs	r3, #8
 8002898:	e00c      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 800289a:	2306      	movs	r3, #6
 800289c:	e00a      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 800289e:	2305      	movs	r3, #5
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_GPIO_Init+0x310>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_GPIO_Init+0x334>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f6:	4a32      	ldr	r2, [pc, #200]	; (80029c0 <HAL_GPIO_Init+0x334>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_GPIO_Init+0x334>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <HAL_GPIO_Init+0x334>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_GPIO_Init+0x334>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_GPIO_Init+0x334>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_GPIO_Init+0x334>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <HAL_GPIO_Init+0x334>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f ae90 	bls.w	80026a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40021c00 	.word	0x40021c00
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e0cd      	b.n	8002b7c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e0:	2201      	movs	r2, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f040 80bd 	bne.w	8002b76 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029fc:	4a65      	ldr	r2, [pc, #404]	; (8002b94 <HAL_GPIO_DeInit+0x1d0>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_GPIO_DeInit+0x1d4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02b      	beq.n	8002a7e <HAL_GPIO_DeInit+0xba>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_GPIO_DeInit+0x1d8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d025      	beq.n	8002a7a <HAL_GPIO_DeInit+0xb6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_GPIO_DeInit+0x1dc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <HAL_GPIO_DeInit+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_GPIO_DeInit+0x1e0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d019      	beq.n	8002a72 <HAL_GPIO_DeInit+0xae>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_GPIO_DeInit+0x1e4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_DeInit+0xaa>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_GPIO_DeInit+0x1e8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00d      	beq.n	8002a6a <HAL_GPIO_DeInit+0xa6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_GPIO_DeInit+0x1ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_DeInit+0xa2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a56      	ldr	r2, [pc, #344]	; (8002bb4 <HAL_GPIO_DeInit+0x1f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_DeInit+0x9e>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e00e      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a62:	2308      	movs	r3, #8
 8002a64:	e00c      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a66:	2306      	movs	r3, #6
 8002a68:	e00a      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e008      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_GPIO_DeInit+0xbc>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	f002 0203 	and.w	r2, r2, #3
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d132      	bne.n	8002af6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4947      	ldr	r1, [pc, #284]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a9e:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4944      	ldr	r1, [pc, #272]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002aac:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	4940      	ldr	r1, [pc, #256]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	493d      	ldr	r1, [pc, #244]	; (8002bb8 <HAL_GPIO_DeInit+0x1f4>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ad8:	4a2e      	ldr	r2, [pc, #184]	; (8002b94 <HAL_GPIO_DeInit+0x1d0>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	482a      	ldr	r0, [pc, #168]	; (8002b94 <HAL_GPIO_DeInit+0x1d0>)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	400a      	ands	r2, r1
 8002af0:	3302      	adds	r3, #2
 8002af2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2103      	movs	r1, #3
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	08d2      	lsrs	r2, r2, #3
 8002b2c:	4019      	ands	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2103      	movs	r1, #3
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	2101      	movs	r1, #1
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2103      	movs	r1, #3
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	f67f af2e 	bls.w	80029e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40021400 	.word	0x40021400
 8002bb0:	40021800 	.word	0x40021800
 8002bb4:	40021c00 	.word	0x40021c00
 8002bb8:	40013c00 	.word	0x40013c00

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf0:	b08f      	sub	sp, #60	; 0x3c
 8002bf2:	af0a      	add	r7, sp, #40	; 0x28
 8002bf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e10f      	b.n	8002e20 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f005 fb26 	bl	800826c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 fa15 	bl	800506e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	687e      	ldr	r6, [r7, #4]
 8002c4c:	466d      	mov	r5, sp
 8002c4e:	f106 0410 	add.w	r4, r6, #16
 8002c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c62:	1d33      	adds	r3, r6, #4
 8002c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f002 f8ec 	bl	8004e44 <USB_CoreInit>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0d0      	b.n	8002e20 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 fa03 	bl	8005090 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e04a      	b.n	8002d26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	333d      	adds	r3, #61	; 0x3d
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	333c      	adds	r3, #60	; 0x3c
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	b298      	uxth	r0, r3
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3342      	adds	r3, #66	; 0x42
 8002ccc:	4602      	mov	r2, r0
 8002cce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	333f      	adds	r3, #63	; 0x3f
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3344      	adds	r3, #68	; 0x44
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3348      	adds	r3, #72	; 0x48
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3350      	adds	r3, #80	; 0x50
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	3301      	adds	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d3af      	bcc.n	8002c90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e044      	b.n	8002dc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3b5      	bcc.n	8002d36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	687e      	ldr	r6, [r7, #4]
 8002dd2:	466d      	mov	r5, sp
 8002dd4:	f106 0410 	add.w	r4, r6, #16
 8002dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de8:	1d33      	adds	r3, r6, #4
 8002dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f002 f99b 	bl	8005128 <USB_DevInit>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00d      	b.n	8002e20 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fa17 	bl	800624c <USB_DevDisconnect>

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_Start+0x1c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e020      	b.n	8002e86 <HAL_PCD_Start+0x5e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d109      	bne.n	8002e68 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d005      	beq.n	8002e68 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 f8ed 	bl	800504c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 f9c7 	bl	800620a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e8e:	b590      	push	{r4, r7, lr}
 8002e90:	b08d      	sub	sp, #52	; 0x34
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fa85 	bl	80063b4 <USB_GetMode>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f040 839d 	bne.w	80035ec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 f9e9 	bl	800628e <USB_ReadInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8393 	beq.w	80035ea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 f9e0 	bl	800628e <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d107      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f002 0202 	and.w	r2, r2, #2
 8002ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 f9ce 	bl	800628e <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d161      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0210 	bic.w	r2, r2, #16
 8002f0a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	0c5b      	lsrs	r3, r3, #17
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d124      	bne.n	8002f82 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d035      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	6a38      	ldr	r0, [r7, #32]
 8002f58:	f003 f805 	bl	8005f66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f68:	441a      	add	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f7a:	441a      	add	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	619a      	str	r2, [r3, #24]
 8002f80:	e016      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	0c5b      	lsrs	r3, r3, #17
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d110      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f94:	2208      	movs	r2, #8
 8002f96:	4619      	mov	r1, r3
 8002f98:	6a38      	ldr	r0, [r7, #32]
 8002f9a:	f002 ffe4 	bl	8005f66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002faa:	441a      	add	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0210 	orr.w	r2, r2, #16
 8002fbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 f962 	bl	800628e <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fd4:	d16e      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 f968 	bl	80062b4 <USB_ReadDevAllOutEpInterrupt>
 8002fe4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fe6:	e062      	b.n	80030ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d057      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 f98d 	bl	800631c <USB_ReadDevOutEPInterrupt>
 8003002:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fdb0 	bl	8003b88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	2308      	movs	r3, #8
 8003042:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 feaa 	bl	8003da0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	2310      	movs	r3, #16
 8003066:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	2320      	movs	r3, #32
 8003082:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	461a      	mov	r2, r3
 800309c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	3301      	adds	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d199      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 f8e8 	bl	800628e <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030c8:	f040 80c0 	bne.w	800324c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 f909 	bl	80062e8 <USB_ReadDevAllInEpInterrupt>
 80030d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030dc:	e0b2      	b.n	8003244 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a7 	beq.w	8003238 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f92f 	bl	8006358 <USB_ReadDevInEPInterrupt>
 80030fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d057      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	69f9      	ldr	r1, [r7, #28]
 8003122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003126:	4013      	ands	r3, r2
 8003128:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	461a      	mov	r2, r3
 8003138:	2301      	movs	r3, #1
 800313a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d132      	bne.n	80031aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3348      	adds	r3, #72	; 0x48
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4403      	add	r3, r0
 8003164:	3344      	adds	r3, #68	; 0x44
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4419      	add	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	3348      	adds	r3, #72	; 0x48
 800317a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <HAL_PCD_IRQHandler+0x31c>
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3350      	adds	r3, #80	; 0x50
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d108      	bne.n	80031aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a2:	461a      	mov	r2, r3
 80031a4:	2101      	movs	r1, #1
 80031a6:	f003 f937 	bl	8006418 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4619      	mov	r1, r3
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f005 f8ea 	bl	800838a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031cc:	461a      	mov	r2, r3
 80031ce:	2308      	movs	r3, #8
 80031d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	2310      	movs	r3, #16
 80031ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003204:	461a      	mov	r2, r3
 8003206:	2340      	movs	r3, #64	; 0x40
 8003208:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003220:	461a      	mov	r2, r3
 8003222:	2302      	movs	r3, #2
 8003224:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fc1b 	bl	8003a6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	3301      	adds	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	f47f af49 	bne.w	80030de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f003 f81c 	bl	800628e <USB_ReadInterrupts>
 8003256:	4603      	mov	r3, r0
 8003258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800325c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003260:	d122      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fe26 	bl	8003edc <HAL_PCDEx_LPM_Callback>
 8003290:	e002      	b.n	8003298 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f005 f8f0 	bl	8008478 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 ffee 	bl	800628e <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032bc:	d112      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f005 f8ac 	bl	800842c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 ffd0 	bl	800628e <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	f040 80c7 	bne.w	800348a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2110      	movs	r1, #16
 8003316:	4618      	mov	r0, r3
 8003318:	f002 f86a 	bl	80053f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003320:	e056      	b.n	80033d0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332e:	461a      	mov	r2, r3
 8003330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003334:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	440a      	add	r2, r1
 800334c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003354:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	440a      	add	r2, r1
 800336c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003374:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003382:	461a      	mov	r2, r3
 8003384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003388:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ba:	0151      	lsls	r1, r2, #5
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	440a      	add	r2, r1
 80033c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	3301      	adds	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3a3      	bcc.n	8003322 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003406:	f043 030b 	orr.w	r3, r3, #11
 800340a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341c:	f043 030b 	orr.w	r3, r3, #11
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	e015      	b.n	8003450 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003436:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800343a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344a:	f043 030b 	orr.w	r3, r3, #11
 800344e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003462:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003474:	461a      	mov	r2, r3
 8003476:	f002 ffcf 	bl	8006418 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f002 fefd 	bl	800628e <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	d124      	bne.n	80034ea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 ff93 	bl	80063d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fffb 	bl	80054aa <USB_GetDevSpeed>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681c      	ldr	r4, [r3, #0]
 80034c0:	f001 f958 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80034c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	4620      	mov	r0, r4
 80034d0:	f001 fd1a 	bl	8004f08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f004 ff80 	bl	80083da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fecd 	bl	800628e <USB_ReadInterrupts>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d10a      	bne.n	8003514 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f004 ff5d 	bl	80083be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f002 0208 	and.w	r2, r2, #8
 8003512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f002 feb8 	bl	800628e <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003528:	d10f      	bne.n	800354a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f004 ffbf 	bl	80084b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f002 fe9d 	bl	800628e <USB_ReadInterrupts>
 8003554:	4603      	mov	r3, r0
 8003556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800355e:	d10f      	bne.n	8003580 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f004 ff92 	bl	8008494 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800357e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fe82 	bl	800628e <USB_ReadInterrupts>
 800358a:	4603      	mov	r3, r0
 800358c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d10a      	bne.n	80035ac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f004 ffa0 	bl	80084dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 fe6c 	bl	800628e <USB_ReadInterrupts>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d115      	bne.n	80035ec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f004 ff90 	bl	80084f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e000      	b.n	80035ec <HAL_PCD_IRQHandler+0x75e>
      return;
 80035ea:	bf00      	nop
    }
  }
}
 80035ec:	3734      	adds	r7, #52	; 0x34
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}

080035f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_SetAddress+0x1a>
 8003608:	2302      	movs	r3, #2
 800360a:	e013      	b.n	8003634 <HAL_PCD_SetAddress+0x42>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f002 fdca 	bl	80061be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	70fb      	strb	r3, [r7, #3]
 800364e:	460b      	mov	r3, r1
 8003650:	803b      	strh	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800365a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800365e:	2b00      	cmp	r3, #0
 8003660:	da0f      	bge.n	8003682 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 020f 	and.w	r2, r3, #15
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	3338      	adds	r3, #56	; 0x38
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	705a      	strb	r2, [r3, #1]
 8003680:	e00f      	b.n	80036a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ae:	883a      	ldrh	r2, [r7, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	78ba      	ldrb	r2, [r7, #2]
 80036b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036cc:	78bb      	ldrb	r3, [r7, #2]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_PCD_EP_Open+0xaa>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e00e      	b.n	8003704 <HAL_PCD_EP_Open+0xc8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fefd 	bl	80054f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003702:	7afb      	ldrb	r3, [r7, #11]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800371c:	2b00      	cmp	r3, #0
 800371e:	da0f      	bge.n	8003740 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	3338      	adds	r3, #56	; 0x38
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	3304      	adds	r3, #4
 8003736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	705a      	strb	r2, [r3, #1]
 800373e:	e00f      	b.n	8003760 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	3304      	adds	r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_PCD_EP_Close+0x6e>
 8003776:	2302      	movs	r3, #2
 8003778:	e00e      	b.n	8003798 <HAL_PCD_EP_Close+0x8c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	4618      	mov	r0, r3
 800378a:	f001 ff3b 	bl	8005604 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	460b      	mov	r3, r1
 80037ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b0:	7afb      	ldrb	r3, [r7, #11]
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	3304      	adds	r3, #4
 80037c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2200      	movs	r2, #0
 80037e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e2:	7afb      	ldrb	r3, [r7, #11]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d102      	bne.n	80037fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	f002 fa16 	bl	8005c44 <USB_EP0StartXfer>
 8003818:	e008      	b.n	800382c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	f001 ffc8 	bl	80057bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003858:	681b      	ldr	r3, [r3, #0]
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	460b      	mov	r3, r1
 8003874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3338      	adds	r3, #56	; 0x38
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2201      	movs	r2, #1
 80038a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a6:	7afb      	ldrb	r3, [r7, #11]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c0:	7afb      	ldrb	r3, [r7, #11]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6979      	ldr	r1, [r7, #20]
 80038d8:	f002 f9b4 	bl	8005c44 <USB_EP0StartXfer>
 80038dc:	e008      	b.n	80038f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	f001 ff66 	bl	80057bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	f003 020f 	and.w	r2, r3, #15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d901      	bls.n	8003918 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e050      	b.n	80039ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391c:	2b00      	cmp	r3, #0
 800391e:	da0f      	bge.n	8003940 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3338      	adds	r3, #56	; 0x38
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	705a      	strb	r2, [r3, #1]
 800393e:	e00d      	b.n	800395c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	3304      	adds	r3, #4
 8003954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_PCD_EP_SetStall+0x82>
 8003978:	2302      	movs	r3, #2
 800397a:	e01e      	b.n	80039ba <HAL_PCD_EP_SetStall+0xc0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fb43 	bl	8006016 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	b2d9      	uxtb	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039aa:	461a      	mov	r2, r3
 80039ac:	f002 fd34 	bl	8006418 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 020f 	and.w	r2, r3, #15
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d901      	bls.n	80039e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e042      	b.n	8003a66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da0f      	bge.n	8003a08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	3338      	adds	r3, #56	; 0x38
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	705a      	strb	r2, [r3, #1]
 8003a06:	e00f      	b.n	8003a28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_PCD_EP_ClrStall+0x86>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_ClrStall+0xa4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 fb4b 	bl	80060f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b08a      	sub	sp, #40	; 0x28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3338      	adds	r3, #56	; 0x38
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d901      	bls.n	8003aa6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06c      	b.n	8003b80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aca:	e02b      	b.n	8003b24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d902      	bls.n	8003ae8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3303      	adds	r3, #3
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68d9      	ldr	r1, [r3, #12]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4603      	mov	r3, r0
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f002 f9ef 	bl	8005eea <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d809      	bhi.n	8003b4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d203      	bcs.n	8003b4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1be      	bne.n	8003acc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d811      	bhi.n	8003b7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	2201      	movs	r2, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	333c      	adds	r3, #60	; 0x3c
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80a0 	bne.w	8003d00 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f240 80dd 	bls.w	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80d7 	beq.w	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	6093      	str	r3, [r2, #8]
 8003bf4:	e0cb      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2320      	movs	r3, #32
 8003c10:	6093      	str	r3, [r2, #8]
 8003c12:	e0bc      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 80b7 	bne.w	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d90f      	bls.n	8003c48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c44:	6093      	str	r3, [r2, #8]
 8003c46:	e0a2      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	0159      	lsls	r1, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	440b      	add	r3, r1
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4403      	add	r3, r0
 8003c7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4403      	add	r3, r0
 8003ca6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4419      	add	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4403      	add	r3, r0
 8003cbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cc0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cea:	461a      	mov	r2, r3
 8003cec:	2101      	movs	r1, #1
 8003cee:	f002 fb93 	bl	8006418 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f004 fb2b 	bl	8008354 <HAL_PCD_DataOutStageCallback>
 8003cfe:	e046      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <PCD_EP_OutXfrComplete_int+0x214>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d124      	bne.n	8003d52 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	e032      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2320      	movs	r3, #32
 8003d42:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f004 fb02 	bl	8008354 <HAL_PCD_DataOutStageCallback>
 8003d50:	e01d      	b.n	8003d8e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d114      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f002 fb4b 	bl	8006418 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f004 fae3 	bl	8008354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	4f54300a 	.word	0x4f54300a
 8003d9c:	4f54310a 	.word	0x4f54310a

08003da0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	333c      	adds	r3, #60	; 0x3c
 8003db8:	3304      	adds	r3, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d90e      	bls.n	8003df4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f004 fa9b 	bl	8008330 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d90c      	bls.n	8003e1c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e14:	461a      	mov	r2, r3
 8003e16:	2101      	movs	r1, #1
 8003e18:	f002 fafe 	bl	8006418 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	4f54300a 	.word	0x4f54300a

08003e2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e4a:	883b      	ldrh	r3, [r7, #0]
 8003e4c:	0419      	lsls	r1, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
 8003e58:	e028      	b.n	8003eac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4413      	add	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	e00d      	b.n	8003e8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3340      	adds	r3, #64	; 0x40
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	3301      	adds	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3ec      	bcc.n	8003e6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e94:	883b      	ldrh	r3, [r7, #0]
 8003e96:	0418      	lsls	r0, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6819      	ldr	r1, [r3, #0]
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4302      	orrs	r2, r0
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e264      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d075      	beq.n	8003ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f12:	4ba3      	ldr	r3, [pc, #652]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d00c      	beq.n	8003f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1e:	4ba0      	ldr	r3, [pc, #640]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d112      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2a:	4b9d      	ldr	r3, [pc, #628]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	4b99      	ldr	r3, [pc, #612]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x108>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d157      	bne.n	8003ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e23f      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_OscConfig+0x74>
 8003f5a:	4b91      	ldr	r3, [pc, #580]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a90      	ldr	r2, [pc, #576]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xb0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x98>
 8003f72:	4b8b      	ldr	r3, [pc, #556]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a8a      	ldr	r2, [pc, #552]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a87      	ldr	r2, [pc, #540]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xb0>
 8003f8c:	4b84      	ldr	r3, [pc, #528]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a83      	ldr	r2, [pc, #524]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a80      	ldr	r2, [pc, #512]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd faf8 	bl	80015a0 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd faf4 	bl	80015a0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e204      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xc0>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fae4 	bl	80015a0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd fae0 	bl	80015a0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1f0      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	4b6c      	ldr	r3, [pc, #432]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0xe8>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d063      	beq.n	80040d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004016:	4b62      	ldr	r3, [pc, #392]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004022:	4b5f      	ldr	r3, [pc, #380]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b5c      	ldr	r3, [pc, #368]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x152>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1c4      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b56      	ldr	r3, [pc, #344]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4952      	ldr	r1, [pc, #328]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e03a      	b.n	80040d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <HAL_RCC_OscConfig+0x2b0>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd fa99 	bl	80015a0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004072:	f7fd fa95 	bl	80015a0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1a5      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4940      	ldr	r1, [pc, #256]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <HAL_RCC_OscConfig+0x2b0>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fa78 	bl	80015a0 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fd fa74 	bl	80015a0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e184      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d030      	beq.n	8004140 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_RCC_OscConfig+0x2b4>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fa58 	bl	80015a0 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fd fa54 	bl	80015a0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e164      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x200>
 8004112:	e015      	b.n	8004140 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_OscConfig+0x2b4>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fd fa41 	bl	80015a0 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004122:	f7fd fa3d 	bl	80015a0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e14d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a0 	beq.w	800428e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004152:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x2b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d121      	bne.n	80041ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_RCC_OscConfig+0x2b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <HAL_RCC_OscConfig+0x2b8>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7fd fa03 	bl	80015a0 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	e011      	b.n	80041c2 <HAL_RCC_OscConfig+0x2ce>
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	42470000 	.word	0x42470000
 80041a8:	42470e80 	.word	0x42470e80
 80041ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fd f9f6 	bl	80015a0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e106      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c2:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <HAL_RCC_OscConfig+0x4e4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d106      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2f0>
 80041d6:	4b81      	ldr	r3, [pc, #516]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a80      	ldr	r2, [pc, #512]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	e01c      	b.n	800421e <HAL_RCC_OscConfig+0x32a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d10c      	bne.n	8004206 <HAL_RCC_OscConfig+0x312>
 80041ec:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a7a      	ldr	r2, [pc, #488]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80041f2:	f043 0304 	orr.w	r3, r3, #4
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
 80041f8:	4b78      	ldr	r3, [pc, #480]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a77      	ldr	r2, [pc, #476]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
 8004204:	e00b      	b.n	800421e <HAL_RCC_OscConfig+0x32a>
 8004206:	4b75      	ldr	r3, [pc, #468]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a74      	ldr	r2, [pc, #464]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	4b72      	ldr	r3, [pc, #456]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a71      	ldr	r2, [pc, #452]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004218:	f023 0304 	bic.w	r3, r3, #4
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d015      	beq.n	8004252 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fd f9bb 	bl	80015a0 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fd f9b7 	bl	80015a0 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0c5      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	4b65      	ldr	r3, [pc, #404]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ee      	beq.n	800422e <HAL_RCC_OscConfig+0x33a>
 8004250:	e014      	b.n	800427c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fd f9a5 	bl	80015a0 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fd f9a1 	bl	80015a0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0af      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	4b5a      	ldr	r3, [pc, #360]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ee      	bne.n	800425a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004282:	4b56      	ldr	r3, [pc, #344]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a55      	ldr	r2, [pc, #340]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 809b 	beq.w	80043ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d05c      	beq.n	800435e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d141      	bne.n	8004330 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ac:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <HAL_RCC_OscConfig+0x4ec>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fd f975 	bl	80015a0 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fd f971 	bl	80015a0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e081      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042cc:	4b43      	ldr	r3, [pc, #268]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	019b      	lsls	r3, r3, #6
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	3b01      	subs	r3, #1
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	4937      	ldr	r1, [pc, #220]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004302:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_RCC_OscConfig+0x4ec>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd f94a 	bl	80015a0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd f946 	bl	80015a0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e056      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x41c>
 800432e:	e04e      	b.n	80043ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_OscConfig+0x4ec>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fd f933 	bl	80015a0 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fd f92f 	bl	80015a0 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e03f      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCC_OscConfig+0x44a>
 800435c:	e037      	b.n	80043ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e032      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_RCC_OscConfig+0x4e8>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d028      	beq.n	80043ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d121      	bne.n	80043ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d11a      	bne.n	80043ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d111      	bne.n	80043ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40007000 	.word	0x40007000
 80043dc:	40023800 	.word	0x40023800
 80043e0:	42470060 	.word	0x42470060

080043e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0cc      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b68      	ldr	r3, [pc, #416]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d90c      	bls.n	8004420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b65      	ldr	r3, [pc, #404]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b8      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004450:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a52      	ldr	r2, [pc, #328]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800445a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	494d      	ldr	r1, [pc, #308]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d044      	beq.n	8004504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d119      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e067      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c2:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4934      	ldr	r1, [pc, #208]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d4:	f7fd f864 	bl	80015a0 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fd f860 	bl	80015a0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e04f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d1eb      	bne.n	80044dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d20c      	bcs.n	800452c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e032      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4916      	ldr	r1, [pc, #88]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	490e      	ldr	r1, [pc, #56]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800456a:	f000 f821 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490a      	ldr	r1, [pc, #40]	; (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc ffc4 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023c00 	.word	0x40023c00
 80045a0:	40023800 	.word	0x40023800
 80045a4:	08009260 	.word	0x08009260
 80045a8:	20000000 	.word	0x20000000
 80045ac:	20000004 	.word	0x20000004

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	2300      	movs	r3, #0
 80045c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c8:	4b67      	ldr	r3, [pc, #412]	; (8004768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d00d      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x40>
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	f200 80bd 	bhi.w	8004754 <HAL_RCC_GetSysClockFreq+0x1a4>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x34>
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x3a>
 80045e2:	e0b7      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b61      	ldr	r3, [pc, #388]	; (800476c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045e6:	60bb      	str	r3, [r7, #8]
       break;
 80045e8:	e0b7      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045ec:	60bb      	str	r3, [r7, #8]
      break;
 80045ee:	e0b4      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f0:	4b5d      	ldr	r3, [pc, #372]	; (8004768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04d      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b58      	ldr	r3, [pc, #352]	; (8004768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	ea02 0800 	and.w	r8, r2, r0
 800461e:	ea03 0901 	and.w	r9, r3, r1
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	014b      	lsls	r3, r1, #5
 8004630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004634:	0142      	lsls	r2, r0, #5
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	ebb0 0008 	subs.w	r0, r0, r8
 800463e:	eb61 0109 	sbc.w	r1, r1, r9
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	018b      	lsls	r3, r1, #6
 800464c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004650:	0182      	lsls	r2, r0, #6
 8004652:	1a12      	subs	r2, r2, r0
 8004654:	eb63 0301 	sbc.w	r3, r3, r1
 8004658:	f04f 0000 	mov.w	r0, #0
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	00d9      	lsls	r1, r3, #3
 8004662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004666:	00d0      	lsls	r0, r2, #3
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	eb12 0208 	adds.w	r2, r2, r8
 8004670:	eb43 0309 	adc.w	r3, r3, r9
 8004674:	f04f 0000 	mov.w	r0, #0
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	0259      	lsls	r1, r3, #9
 800467e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004682:	0250      	lsls	r0, r2, #9
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	461a      	mov	r2, r3
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f7fb fdec 	bl	8000270 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4613      	mov	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e04a      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b31      	ldr	r3, [pc, #196]	; (8004768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	ea02 0400 	and.w	r4, r2, r0
 80046ba:	ea03 0501 	and.w	r5, r3, r1
 80046be:	4620      	mov	r0, r4
 80046c0:	4629      	mov	r1, r5
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	014b      	lsls	r3, r1, #5
 80046cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046d0:	0142      	lsls	r2, r0, #5
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	1b00      	subs	r0, r0, r4
 80046d8:	eb61 0105 	sbc.w	r1, r1, r5
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	018b      	lsls	r3, r1, #6
 80046e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046ea:	0182      	lsls	r2, r0, #6
 80046ec:	1a12      	subs	r2, r2, r0
 80046ee:	eb63 0301 	sbc.w	r3, r3, r1
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f04f 0100 	mov.w	r1, #0
 80046fa:	00d9      	lsls	r1, r3, #3
 80046fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004700:	00d0      	lsls	r0, r2, #3
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	1912      	adds	r2, r2, r4
 8004708:	eb45 0303 	adc.w	r3, r5, r3
 800470c:	f04f 0000 	mov.w	r0, #0
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	0299      	lsls	r1, r3, #10
 8004716:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800471a:	0290      	lsls	r0, r2, #10
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f7fb fda0 	bl	8000270 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	3301      	adds	r3, #1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	60bb      	str	r3, [r7, #8]
      break;
 8004752:	e002      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004756:	60bb      	str	r3, [r7, #8]
      break;
 8004758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800475a:	68bb      	ldr	r3, [r7, #8]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	00f42400 	.word	0x00f42400
 8004770:	007a1200 	.word	0x007a1200

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_RCC_GetHCLKFreq+0x14>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000000 	.word	0x20000000

0800478c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e041      	b.n	8004822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fe42 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 f984 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e046      	b.n	80048d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <HAL_TIM_Base_Start+0xb4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d01d      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_TIM_Base_Start+0xb8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_TIM_Base_Start+0xbc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_TIM_Base_Start+0xc0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_TIM_Base_Start+0xc4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_TIM_Base_Start+0xc8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_Base_Start+0x70>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_TIM_Base_Start+0xcc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d010      	beq.n	80048d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	e007      	b.n	80048d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40010400 	.word	0x40010400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40001800 	.word	0x40001800

080048fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	f241 1311 	movw	r3, #4369	; 0x1111
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_TIM_Base_Stop+0x38>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	f240 4344 	movw	r3, #1092	; 0x444
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <HAL_TIM_Base_Stop+0x38>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_TIM_ConfigClockSource+0x1c>
 8004962:	2302      	movs	r3, #2
 8004964:	e0b4      	b.n	8004ad0 <HAL_TIM_ConfigClockSource+0x186>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004984:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	d03e      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xd4>
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a4:	f200 8087 	bhi.w	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ac:	f000 8086 	beq.w	8004abc <HAL_TIM_ConfigClockSource+0x172>
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b4:	d87f      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049b6:	2b70      	cmp	r3, #112	; 0x70
 80049b8:	d01a      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0xa6>
 80049ba:	2b70      	cmp	r3, #112	; 0x70
 80049bc:	d87b      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049be:	2b60      	cmp	r3, #96	; 0x60
 80049c0:	d050      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0x11a>
 80049c2:	2b60      	cmp	r3, #96	; 0x60
 80049c4:	d877      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049c6:	2b50      	cmp	r3, #80	; 0x50
 80049c8:	d03c      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0xfa>
 80049ca:	2b50      	cmp	r3, #80	; 0x50
 80049cc:	d873      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d058      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0x13a>
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d86f      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d064      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d86b      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d060      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d867      	bhi.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d05c      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d05a      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0x15a>
 80049ee:	e062      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f000 f984 	bl	8004d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
      break;
 8004a1c:	e04f      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f000 f96d 	bl	8004d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a40:	609a      	str	r2, [r3, #8]
      break;
 8004a42:	e03c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f000 f8e1 	bl	8004c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2150      	movs	r1, #80	; 0x50
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f93a 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004a62:	e02c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f000 f900 	bl	8004c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2160      	movs	r1, #96	; 0x60
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f92a 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004a82:	e01c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f000 f8c1 	bl	8004c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2140      	movs	r1, #64	; 0x40
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f91a 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004aa2:	e00c      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f000 f911 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e003      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aba:	e000      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004abc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a40      	ldr	r2, [pc, #256]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <TIM_Base_SetConfig+0x118>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3c      	ldr	r2, [pc, #240]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3b      	ldr	r2, [pc, #236]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d108      	bne.n	8004b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2f      	ldr	r2, [pc, #188]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02b      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d027      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <TIM_Base_SetConfig+0x118>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d023      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01f      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2a      	ldr	r2, [pc, #168]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01b      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d017      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_Base_SetConfig+0x12c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <TIM_Base_SetConfig+0x130>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <TIM_Base_SetConfig+0x134>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <TIM_Base_SetConfig+0x138>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <TIM_Base_SetConfig+0x13c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0xf8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d103      	bne.n	8004bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	615a      	str	r2, [r3, #20]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800
 8004c0c:	40001800 	.word	0x40001800
 8004c10:	40001c00 	.word	0x40001c00
 8004c14:	40002000 	.word	0x40002000

08004c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0201 	bic.w	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 030a 	bic.w	r3, r3, #10
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b087      	sub	sp, #28
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0210 	bic.w	r2, r3, #16
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	031b      	lsls	r3, r3, #12
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f043 0307 	orr.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e05a      	b.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d022      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d01d      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d018      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00e      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d009      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d10c      	bne.n	8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40010400 	.word	0x40010400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40001800 	.word	0x40001800

08004e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 001c 	add.w	r0, r7, #28
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d122      	bne.n	8004ea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fb1c 	bl	80064d4 <USB_CoreReset>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e01a      	b.n	8004ed8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 fb10 	bl	80064d4 <USB_CoreReset>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eca:	e005      	b.n	8004ed8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10b      	bne.n	8004ef6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f043 0206 	orr.w	r2, r3, #6
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f02:	b004      	add	sp, #16
 8004f04:	4770      	bx	lr
	...

08004f08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d165      	bne.n	8004fe8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a41      	ldr	r2, [pc, #260]	; (8005024 <USB_SetTurnaroundTime+0x11c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d906      	bls.n	8004f32 <USB_SetTurnaroundTime+0x2a>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a40      	ldr	r2, [pc, #256]	; (8005028 <USB_SetTurnaroundTime+0x120>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d202      	bcs.n	8004f32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e062      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a3c      	ldr	r2, [pc, #240]	; (8005028 <USB_SetTurnaroundTime+0x120>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d306      	bcc.n	8004f48 <USB_SetTurnaroundTime+0x40>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a3b      	ldr	r2, [pc, #236]	; (800502c <USB_SetTurnaroundTime+0x124>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d202      	bcs.n	8004f48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f42:	230e      	movs	r3, #14
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e057      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a38      	ldr	r2, [pc, #224]	; (800502c <USB_SetTurnaroundTime+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d306      	bcc.n	8004f5e <USB_SetTurnaroundTime+0x56>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a37      	ldr	r2, [pc, #220]	; (8005030 <USB_SetTurnaroundTime+0x128>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d202      	bcs.n	8004f5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f58:	230d      	movs	r3, #13
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e04c      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4a33      	ldr	r2, [pc, #204]	; (8005030 <USB_SetTurnaroundTime+0x128>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d306      	bcc.n	8004f74 <USB_SetTurnaroundTime+0x6c>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a32      	ldr	r2, [pc, #200]	; (8005034 <USB_SetTurnaroundTime+0x12c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d802      	bhi.n	8004f74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f6e:	230c      	movs	r3, #12
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e041      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <USB_SetTurnaroundTime+0x12c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d906      	bls.n	8004f8a <USB_SetTurnaroundTime+0x82>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a2e      	ldr	r2, [pc, #184]	; (8005038 <USB_SetTurnaroundTime+0x130>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d802      	bhi.n	8004f8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f84:	230b      	movs	r3, #11
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e036      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <USB_SetTurnaroundTime+0x130>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d906      	bls.n	8004fa0 <USB_SetTurnaroundTime+0x98>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <USB_SetTurnaroundTime+0x134>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d802      	bhi.n	8004fa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e02b      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4a26      	ldr	r2, [pc, #152]	; (800503c <USB_SetTurnaroundTime+0x134>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d906      	bls.n	8004fb6 <USB_SetTurnaroundTime+0xae>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a25      	ldr	r2, [pc, #148]	; (8005040 <USB_SetTurnaroundTime+0x138>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d202      	bcs.n	8004fb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fb0:	2309      	movs	r3, #9
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e020      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4a21      	ldr	r2, [pc, #132]	; (8005040 <USB_SetTurnaroundTime+0x138>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d306      	bcc.n	8004fcc <USB_SetTurnaroundTime+0xc4>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <USB_SetTurnaroundTime+0x13c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d802      	bhi.n	8004fcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e015      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <USB_SetTurnaroundTime+0x13c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d906      	bls.n	8004fe2 <USB_SetTurnaroundTime+0xda>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <USB_SetTurnaroundTime+0x140>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d202      	bcs.n	8004fe2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fdc:	2307      	movs	r3, #7
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e00a      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fe2:	2306      	movs	r3, #6
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	e007      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fee:	2309      	movs	r3, #9
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e001      	b.n	8004ff8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ff4:	2309      	movs	r3, #9
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	00d8acbf 	.word	0x00d8acbf
 8005028:	00e4e1c0 	.word	0x00e4e1c0
 800502c:	00f42400 	.word	0x00f42400
 8005030:	01067380 	.word	0x01067380
 8005034:	011a499f 	.word	0x011a499f
 8005038:	01312cff 	.word	0x01312cff
 800503c:	014ca43f 	.word	0x014ca43f
 8005040:	016e3600 	.word	0x016e3600
 8005044:	01a6ab1f 	.word	0x01a6ab1f
 8005048:	01e84800 	.word	0x01e84800

0800504c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f043 0201 	orr.w	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d115      	bne.n	80050de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050be:	2001      	movs	r0, #1
 80050c0:	f7fc fa7a 	bl	80015b8 <HAL_Delay>
      ms++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f972 	bl	80063b4 <USB_GetMode>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d01e      	beq.n	8005114 <USB_SetCurrentMode+0x84>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b31      	cmp	r3, #49	; 0x31
 80050da:	d9f0      	bls.n	80050be <USB_SetCurrentMode+0x2e>
 80050dc:	e01a      	b.n	8005114 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d115      	bne.n	8005110 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7fc fa61 	bl	80015b8 <HAL_Delay>
      ms++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 f959 	bl	80063b4 <USB_GetMode>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <USB_SetCurrentMode+0x84>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b31      	cmp	r3, #49	; 0x31
 800510c:	d9f0      	bls.n	80050f0 <USB_SetCurrentMode+0x60>
 800510e:	e001      	b.n	8005114 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e005      	b.n	8005120 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b32      	cmp	r3, #50	; 0x32
 8005118:	d101      	bne.n	800511e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005128:	b084      	sub	sp, #16
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e009      	b.n	800515c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3340      	adds	r3, #64	; 0x40
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3301      	adds	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b0e      	cmp	r3, #14
 8005160:	d9f2      	bls.n	8005148 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11c      	bne.n	80051a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005176:	f043 0302 	orr.w	r3, r3, #2
 800517a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
 80051a0:	e00b      	b.n	80051ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051cc:	4619      	mov	r1, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	461a      	mov	r2, r3
 80051d6:	680b      	ldr	r3, [r1, #0]
 80051d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10c      	bne.n	80051fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051e6:	2100      	movs	r1, #0
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f945 	bl	8005478 <USB_SetDevSpeed>
 80051ee:	e008      	b.n	8005202 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051f0:	2101      	movs	r1, #1
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f940 	bl	8005478 <USB_SetDevSpeed>
 80051f8:	e003      	b.n	8005202 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051fa:	2103      	movs	r1, #3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f93b 	bl	8005478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005202:	2110      	movs	r1, #16
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8f3 	bl	80053f0 <USB_FlushTxFifo>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f90f 	bl	8005438 <USB_FlushRxFifo>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	461a      	mov	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	461a      	mov	r2, r3
 8005244:	2300      	movs	r3, #0
 8005246:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	e043      	b.n	80052d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005264:	d118      	bne.n	8005298 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e013      	b.n	80052aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	461a      	mov	r2, r3
 8005290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e008      	b.n	80052aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	461a      	mov	r2, r3
 80052a6:	2300      	movs	r3, #0
 80052a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	461a      	mov	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	461a      	mov	r2, r3
 80052ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3301      	adds	r3, #1
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3b7      	bcc.n	800524e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e043      	b.n	800536c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fa:	d118      	bne.n	800532e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	461a      	mov	r2, r3
 8005310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e013      	b.n	8005340 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	461a      	mov	r2, r3
 8005326:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e008      	b.n	8005340 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	461a      	mov	r2, r3
 800533c:	2300      	movs	r3, #0
 800533e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	461a      	mov	r2, r3
 800534e:	2300      	movs	r3, #0
 8005350:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	461a      	mov	r2, r3
 8005360:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005364:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3301      	adds	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d3b7      	bcc.n	80052e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005386:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005394:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f043 0210 	orr.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699a      	ldr	r2, [r3, #24]
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <USB_DevInit+0x2c4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f043 0208 	orr.w	r2, r3, #8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d107      	bne.n	80053dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053e8:	b004      	add	sp, #16
 80053ea:	4770      	bx	lr
 80053ec:	803c3800 	.word	0x803c3800

080053f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3301      	adds	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <USB_FlushTxFifo+0x44>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e006      	b.n	8005428 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b20      	cmp	r3, #32
 8005424:	d0f1      	beq.n	800540a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	00030d40 	.word	0x00030d40

08005438 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2210      	movs	r2, #16
 8005448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	4a08      	ldr	r2, [pc, #32]	; (8005474 <USB_FlushRxFifo+0x3c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e006      	b.n	8005468 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d0f1      	beq.n	800544a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	00030d40 	.word	0x00030d40

08005478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b087      	sub	sp, #28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0306 	and.w	r3, r3, #6
 80054c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]
 80054ce:	e00a      	b.n	80054e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d002      	beq.n	80054dc <USB_GetDevSpeed+0x32>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b06      	cmp	r3, #6
 80054da:	d102      	bne.n	80054e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054dc:	2302      	movs	r3, #2
 80054de:	75fb      	strb	r3, [r7, #23]
 80054e0:	e001      	b.n	80054e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054e2:	230f      	movs	r3, #15
 80054e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d13a      	bne.n	8005586 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	b29b      	uxth	r3, r3
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552e:	4313      	orrs	r3, r2
 8005530:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d155      	bne.n	80055f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	78db      	ldrb	r3, [r3, #3]
 8005562:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005564:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	059b      	lsls	r3, r3, #22
 800556a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800556c:	4313      	orrs	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	e036      	b.n	80055f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	2101      	movs	r1, #1
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11a      	bne.n	80055f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055da:	430b      	orrs	r3, r1
 80055dc:	4313      	orrs	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d161      	bne.n	80056e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005636:	d11f      	bne.n	8005678 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005652:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005656:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005676:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	2101      	movs	r1, #1
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	b29b      	uxth	r3, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005698:	4013      	ands	r3, r2
 800569a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	2101      	movs	r1, #1
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056bc:	4013      	ands	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0159      	lsls	r1, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	4619      	mov	r1, r3
 80056dc:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <USB_DeactivateEndpoint+0x1b0>)
 80056de:	4013      	ands	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
 80056e2:	e060      	b.n	80057a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056fa:	d11f      	bne.n	800573c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800571a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	0151      	lsls	r1, r2, #5
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	440a      	add	r2, r1
 8005732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800573a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	2101      	movs	r1, #1
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	43db      	mvns	r3, r3
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575c:	4013      	ands	r3, r2
 800575e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	43db      	mvns	r3, r3
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005780:	4013      	ands	r3, r2
 8005782:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	0159      	lsls	r1, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	440b      	add	r3, r1
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	4619      	mov	r1, r3
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <USB_DeactivateEndpoint+0x1b4>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	ec337800 	.word	0xec337800
 80057b8:	eff37800 	.word	0xeff37800

080057bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f040 815c 	bne.w	8005a96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d132      	bne.n	800584c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005804:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	440a      	add	r2, r1
 8005820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005844:	0cdb      	lsrs	r3, r3, #19
 8005846:	04db      	lsls	r3, r3, #19
 8005848:	6113      	str	r3, [r2, #16]
 800584a:	e074      	b.n	8005936 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005866:	0cdb      	lsrs	r3, r3, #19
 8005868:	04db      	lsls	r3, r3, #19
 800586a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800588a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800588e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6959      	ldr	r1, [r3, #20]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	440b      	add	r3, r1
 80058a8:	1e59      	subs	r1, r3, #1
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058b4:	4b9d      	ldr	r3, [pc, #628]	; (8005b2c <USB_EPStartXfer+0x370>)
 80058b6:	400b      	ands	r3, r1
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	0148      	lsls	r0, r1, #5
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	4401      	add	r1, r0
 80058c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058c4:	4313      	orrs	r3, r2
 80058c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058de:	69b9      	ldr	r1, [r7, #24]
 80058e0:	0148      	lsls	r0, r1, #5
 80058e2:	69f9      	ldr	r1, [r7, #28]
 80058e4:	4401      	add	r1, r0
 80058e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058ea:	4313      	orrs	r3, r2
 80058ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	78db      	ldrb	r3, [r3, #3]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d11f      	bne.n	8005936 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005914:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005934:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d14b      	bne.n	80059d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	461a      	mov	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	78db      	ldrb	r3, [r3, #3]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d128      	bne.n	80059b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d110      	bne.n	8005992 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e00f      	b.n	80059b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e12f      	b.n	8005c34 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d015      	beq.n	8005a28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8117 	beq.w	8005c34 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a22:	4313      	orrs	r3, r2
 8005a24:	634b      	str	r3, [r1, #52]	; 0x34
 8005a26:	e105      	b.n	8005c34 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d110      	bne.n	8005a5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	e00f      	b.n	8005a7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68d9      	ldr	r1, [r3, #12]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	b298      	uxth	r0, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa2b 	bl	8005eea <USB_WritePacket>
 8005a94:	e0ce      	b.n	8005c34 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab0:	0cdb      	lsrs	r3, r3, #19
 8005ab2:	04db      	lsls	r3, r3, #19
 8005ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ad8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d126      	bne.n	8005b30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af8:	69b9      	ldr	r1, [r7, #24]
 8005afa:	0148      	lsls	r0, r1, #5
 8005afc:	69f9      	ldr	r1, [r7, #28]
 8005afe:	4401      	add	r1, r0
 8005b00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b04:	4313      	orrs	r3, r2
 8005b06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b26:	6113      	str	r3, [r2, #16]
 8005b28:	e036      	b.n	8005b98 <USB_EPStartXfer+0x3dc>
 8005b2a:	bf00      	nop
 8005b2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	1e5a      	subs	r2, r3, #1
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	8afb      	ldrh	r3, [r7, #22]
 8005b56:	04d9      	lsls	r1, r3, #19
 8005b58:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <USB_EPStartXfer+0x484>)
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	0148      	lsls	r0, r1, #5
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	4401      	add	r1, r0
 8005b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	8af9      	ldrh	r1, [r7, #22]
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	0148      	lsls	r0, r1, #5
 8005b8c:	69f9      	ldr	r1, [r7, #28]
 8005b8e:	4401      	add	r1, r0
 8005b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b94:	4313      	orrs	r3, r2
 8005b96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d10d      	bne.n	8005bba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d128      	bne.n	8005c14 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d110      	bne.n	8005bf4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	e00f      	b.n	8005c14 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	1ff80000 	.word	0x1ff80000

08005c44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 80cd 	bne.w	8005e00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d132      	bne.n	8005cd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	0cdb      	lsrs	r3, r3, #19
 8005cce:	04db      	lsls	r3, r3, #19
 8005cd0:	6113      	str	r3, [r2, #16]
 8005cd2:	e04e      	b.n	8005d72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	0cdb      	lsrs	r3, r3, #19
 8005cf0:	04db      	lsls	r3, r3, #19
 8005cf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d903      	bls.n	8005d2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d62:	6939      	ldr	r1, [r7, #16]
 8005d64:	0148      	lsls	r0, r1, #5
 8005d66:	6979      	ldr	r1, [r7, #20]
 8005d68:	4401      	add	r1, r0
 8005d6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d11e      	bne.n	8005db6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e092      	b.n	8005edc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d07e      	beq.n	8005edc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	2101      	movs	r1, #1
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	6979      	ldr	r1, [r7, #20]
 8005df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	634b      	str	r3, [r1, #52]	; 0x34
 8005dfe:	e06d      	b.n	8005edc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	0cdb      	lsrs	r3, r3, #19
 8005e1c:	04db      	lsls	r3, r3, #19
 8005e1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8a:	6939      	ldr	r1, [r7, #16]
 8005e8c:	0148      	lsls	r0, r1, #5
 8005e8e:	6979      	ldr	r1, [r7, #20]
 8005e90:	4401      	add	r1, r0
 8005e92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e96:	4313      	orrs	r3, r2
 8005e98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d10d      	bne.n	8005ebc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d009      	beq.n	8005ebc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	68d9      	ldr	r1, [r3, #12]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	460a      	mov	r2, r1
 8005eba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b089      	sub	sp, #36	; 0x24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	460b      	mov	r3, r1
 8005efa:	71fb      	strb	r3, [r7, #7]
 8005efc:	4613      	mov	r3, r2
 8005efe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d123      	bne.n	8005f58 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f10:	88bb      	ldrh	r3, [r7, #4]
 8005f12:	3303      	adds	r3, #3
 8005f14:	089b      	lsrs	r3, r3, #2
 8005f16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	e018      	b.n	8005f50 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	031a      	lsls	r2, r3, #12
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3301      	adds	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3301      	adds	r3, #1
 8005f42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3e2      	bcc.n	8005f1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3724      	adds	r7, #36	; 0x24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b08b      	sub	sp, #44	; 0x2c
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	4613      	mov	r3, r2
 8005f72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	623b      	str	r3, [r7, #32]
 8005f90:	e014      	b.n	8005fbc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	3301      	adds	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	6a3a      	ldr	r2, [r7, #32]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d3e6      	bcc.n	8005f92 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fc4:	8bfb      	ldrh	r3, [r7, #30]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01e      	beq.n	8006008 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	701a      	strb	r2, [r3, #0]
      i++;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ffc:	8bfb      	ldrh	r3, [r7, #30]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006002:	8bfb      	ldrh	r3, [r7, #30]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1ea      	bne.n	8005fde <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800600a:	4618      	mov	r0, r3
 800600c:	372c      	adds	r7, #44	; 0x2c
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d12c      	bne.n	800608c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	db12      	blt.n	800606a <USB_EPSetStall+0x54>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00f      	beq.n	800606a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006068:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e02b      	b.n	80060e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	db12      	blt.n	80060c4 <USB_EPSetStall+0xae>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00f      	beq.n	80060c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d128      	bne.n	8006160 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800612c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	78db      	ldrb	r3, [r3, #3]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d003      	beq.n	800613e <USB_EPClearStall+0x4c>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d138      	bne.n	80061b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e027      	b.n	80061b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800617e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	78db      	ldrb	r3, [r3, #3]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d003      	beq.n	8006190 <USB_EPClearStall+0x9e>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	78db      	ldrb	r3, [r3, #3]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d10f      	bne.n	80061b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006224:	f023 0303 	bic.w	r3, r3, #3
 8006228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006238:	f023 0302 	bic.w	r3, r3, #2
 800623c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f043 0302 	orr.w	r3, r3, #2
 800627e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4013      	ands	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062a6:	68fb      	ldr	r3, [r7, #12]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4013      	ands	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	0c1b      	lsrs	r3, r3, #16
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	b29b      	uxth	r3, r3
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800634a:	68bb      	ldr	r3, [r7, #8]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	01db      	lsls	r3, r3, #7
 800638a:	b2db      	uxtb	r3, r3
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4013      	ands	r3, r2
 80063a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a6:	68bb      	ldr	r3, [r7, #8]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0301 	and.w	r3, r3, #1
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	460b      	mov	r3, r1
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	333c      	adds	r3, #60	; 0x3c
 800642e:	3304      	adds	r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4a26      	ldr	r2, [pc, #152]	; (80064d0 <USB_EP0_OutStart+0xb8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d90a      	bls.n	8006452 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644c:	d101      	bne.n	8006452 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e037      	b.n	80064c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006480:	f043 0318 	orr.w	r3, r3, #24
 8006484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006494:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006498:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800649a:	7afb      	ldrb	r3, [r7, #11]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10f      	bne.n	80064c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	4f54300a 	.word	0x4f54300a

080064d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	4a13      	ldr	r2, [pc, #76]	; (8006534 <USB_CoreReset+0x60>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d901      	bls.n	80064f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e01a      	b.n	8006526 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	daf3      	bge.n	80064e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f043 0201 	orr.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <USB_CoreReset+0x60>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e006      	b.n	8006526 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d0f1      	beq.n	8006508 <USB_CoreReset+0x34>

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	00030d40 	.word	0x00030d40

08006538 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006544:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006548:	f002 f96e 	bl	8008828 <USBD_static_malloc>
 800654c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800655c:	2302      	movs	r3, #2
 800655e:	e066      	b.n	800662e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7c1b      	ldrb	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d119      	bne.n	80065a4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006574:	2202      	movs	r2, #2
 8006576:	2181      	movs	r1, #129	; 0x81
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 f832 	bl	80085e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006588:	2202      	movs	r2, #2
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f002 f828 	bl	80085e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2210      	movs	r2, #16
 800659e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80065a2:	e016      	b.n	80065d2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	2202      	movs	r2, #2
 80065a8:	2181      	movs	r1, #129	; 0x81
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f002 f819 	bl	80085e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	2202      	movs	r2, #2
 80065ba:	2101      	movs	r1, #1
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f002 f810 	bl	80085e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2210      	movs	r2, #16
 80065ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065d2:	2308      	movs	r3, #8
 80065d4:	2203      	movs	r2, #3
 80065d6:	2182      	movs	r1, #130	; 0x82
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 f802 	bl	80085e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7c1b      	ldrb	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800660e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006612:	2101      	movs	r1, #1
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f002 f8d3 	bl	80087c0 <USBD_LL_PrepareReceive>
 800661a:	e007      	b.n	800662c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f002 f8ca 	bl	80087c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006642:	2181      	movs	r1, #129	; 0x81
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fff2 	bl	800862e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006650:	2101      	movs	r1, #1
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 ffeb 	bl	800862e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006660:	2182      	movs	r1, #130	; 0x82
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 ffe3 	bl	800862e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006692:	4618      	mov	r0, r3
 8006694:	f002 f8d6 	bl	8008844 <USBD_static_free>
    pdev->pClassData = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e0af      	b.n	8006834 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d03f      	beq.n	8006760 <USBD_CDC_Setup+0xb4>
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	f040 809f 	bne.w	8006824 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	88db      	ldrh	r3, [r3, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d02e      	beq.n	800674c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da16      	bge.n	8006726 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006704:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	88d2      	ldrh	r2, [r2, #6]
 800670a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	2b07      	cmp	r3, #7
 8006712:	bf28      	it	cs
 8006714:	2307      	movcs	r3, #7
 8006716:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	89fa      	ldrh	r2, [r7, #14]
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 fb19 	bl	8007d56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006724:	e085      	b.n	8006832 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	785a      	ldrb	r2, [r3, #1]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	88db      	ldrh	r3, [r3, #6]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800673c:	6939      	ldr	r1, [r7, #16]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	88db      	ldrh	r3, [r3, #6]
 8006742:	461a      	mov	r2, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fb32 	bl	8007dae <USBD_CtlPrepareRx>
      break;
 800674a:	e072      	b.n	8006832 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	7850      	ldrb	r0, [r2, #1]
 8006758:	2200      	movs	r2, #0
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	4798      	blx	r3
      break;
 800675e:	e068      	b.n	8006832 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b0b      	cmp	r3, #11
 8006766:	d852      	bhi.n	800680e <USBD_CDC_Setup+0x162>
 8006768:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <USBD_CDC_Setup+0xc4>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	080067a1 	.word	0x080067a1
 8006774:	0800681d 	.word	0x0800681d
 8006778:	0800680f 	.word	0x0800680f
 800677c:	0800680f 	.word	0x0800680f
 8006780:	0800680f 	.word	0x0800680f
 8006784:	0800680f 	.word	0x0800680f
 8006788:	0800680f 	.word	0x0800680f
 800678c:	0800680f 	.word	0x0800680f
 8006790:	0800680f 	.word	0x0800680f
 8006794:	0800680f 	.word	0x0800680f
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067f5 	.word	0x080067f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d107      	bne.n	80067bc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067ac:	f107 030a 	add.w	r3, r7, #10
 80067b0:	2202      	movs	r2, #2
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 face 	bl	8007d56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ba:	e032      	b.n	8006822 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fa58 	bl	8007c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	75fb      	strb	r3, [r7, #23]
          break;
 80067c8:	e02b      	b.n	8006822 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d107      	bne.n	80067e6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067d6:	f107 030d 	add.w	r3, r7, #13
 80067da:	2201      	movs	r2, #1
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fab9 	bl	8007d56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067e4:	e01d      	b.n	8006822 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fa43 	bl	8007c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ee:	2303      	movs	r3, #3
 80067f0:	75fb      	strb	r3, [r7, #23]
          break;
 80067f2:	e016      	b.n	8006822 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d00f      	beq.n	8006820 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fa36 	bl	8007c74 <USBD_CtlError>
            ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800680c:	e008      	b.n	8006820 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fa2f 	bl	8007c74 <USBD_CtlError>
          ret = USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	75fb      	strb	r3, [r7, #23]
          break;
 800681a:	e002      	b.n	8006822 <USBD_CDC_Setup+0x176>
          break;
 800681c:	bf00      	nop
 800681e:	e008      	b.n	8006832 <USBD_CDC_Setup+0x186>
          break;
 8006820:	bf00      	nop
      }
      break;
 8006822:	e006      	b.n	8006832 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fa24 	bl	8007c74 <USBD_CtlError>
      ret = USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	75fb      	strb	r3, [r7, #23]
      break;
 8006830:	bf00      	nop
  }

  return (uint8_t)ret;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800684e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	e04f      	b.n	80068fe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006864:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	3318      	adds	r3, #24
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d029      	beq.n	80068d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	3318      	adds	r3, #24
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	78f9      	ldrb	r1, [r7, #3]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	460b      	mov	r3, r1
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	1a5b      	subs	r3, r3, r1
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4403      	add	r3, r0
 800689c:	3344      	adds	r3, #68	; 0x44
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80068a4:	fb03 f301 	mul.w	r3, r3, r1
 80068a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d110      	bne.n	80068d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	3318      	adds	r3, #24
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068c2:	78f9      	ldrb	r1, [r7, #3]
 80068c4:	2300      	movs	r3, #0
 80068c6:	2200      	movs	r2, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 ff58 	bl	800877e <USBD_LL_Transmit>
 80068ce:	e015      	b.n	80068fc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006918:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	e015      	b.n	8006954 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 ff68 	bl	8008802 <USBD_LL_GetRxDataSize>
 8006932:	4602      	mov	r2, r0
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800694e:	4611      	mov	r1, r2
 8006950:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800696a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006972:	2303      	movs	r3, #3
 8006974:	e01b      	b.n	80069ae <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d015      	beq.n	80069ac <USBD_CDC_EP0_RxReady+0x50>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	d010      	beq.n	80069ac <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006998:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069a0:	b292      	uxth	r2, r2
 80069a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	22ff      	movs	r2, #255	; 0xff
 80069a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2243      	movs	r2, #67	; 0x43
 80069c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80069c6:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	20000094 	.word	0x20000094

080069d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2243      	movs	r2, #67	; 0x43
 80069e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069e6:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	20000050 	.word	0x20000050

080069f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2243      	movs	r2, #67	; 0x43
 8006a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a06:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	200000d8 	.word	0x200000d8

08006a18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	220a      	movs	r2, #10
 8006a24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a26:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	2000000c 	.word	0x2000000c

08006a38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e004      	b.n	8006a56 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a74:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e008      	b.n	8006a92 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e004      	b.n	8006ac4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ade:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e01a      	b.n	8006b28 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d114      	bne.n	8006b26 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b1a:	2181      	movs	r1, #129	; 0x81
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fe2e 	bl	800877e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e016      	b.n	8006b7c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7c1b      	ldrb	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b60:	2101      	movs	r1, #1
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fe2c 	bl	80087c0 <USBD_LL_PrepareReceive>
 8006b68:	e007      	b.n	8006b7a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	2101      	movs	r1, #1
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 fe23 	bl	80087c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e01f      	b.n	8006bdc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	79fa      	ldrb	r2, [r7, #7]
 8006bce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f001 fc9f 	bl	8008514 <USBD_LL_Init>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e016      	b.n	8006c2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	f107 020e 	add.w	r2, r7, #14
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
 8006c20:	4602      	mov	r2, r0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fcb6 	bl	80085ac <USBD_LL_Start>
 8006c40:	4603      	mov	r3, r0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	4611      	mov	r1, r2
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	4611      	mov	r1, r2
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
  }

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 ff90 	bl	8007c00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d01a      	beq.n	8006d3a <USBD_LL_SetupStage+0x72>
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d822      	bhi.n	8006d4e <USBD_LL_SetupStage+0x86>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <USBD_LL_SetupStage+0x4a>
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d00a      	beq.n	8006d26 <USBD_LL_SetupStage+0x5e>
 8006d10:	e01d      	b.n	8006d4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa62 	bl	80071e4 <USBD_StdDevReq>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
      break;
 8006d24:	e020      	b.n	8006d68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fac6 	bl	80072c0 <USBD_StdItfReq>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
      break;
 8006d38:	e016      	b.n	8006d68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb05 	bl	8007352 <USBD_StdEPReq>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d4c:	e00c      	b.n	8006d68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fc85 	bl	800866c <USBD_LL_StallEP>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
      break;
 8006d66:	bf00      	nop
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d138      	bne.n	8006df8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d14a      	bne.n	8006e2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d913      	bls.n	8006dcc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bf28      	it	cs
 8006dbe:	4613      	movcs	r3, r2
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f001 f80f 	bl	8007de8 <USBD_CtlContinueRx>
 8006dca:	e030      	b.n	8006e2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d10b      	bne.n	8006df0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 f80a 	bl	8007e0a <USBD_CtlSendStatus>
 8006df6:	e01a      	b.n	8006e2e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d114      	bne.n	8006e2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	7afa      	ldrb	r2, [r7, #11]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	4798      	blx	r3
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	e000      	b.n	8006e30 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	460b      	mov	r3, r1
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d16b      	bne.n	8006f24 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3314      	adds	r3, #20
 8006e50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d156      	bne.n	8006f0a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d914      	bls.n	8006e92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 ff84 	bl	8007d8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e84:	2300      	movs	r3, #0
 8006e86:	2200      	movs	r2, #0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f001 fc98 	bl	80087c0 <USBD_LL_PrepareReceive>
 8006e90:	e03b      	b.n	8006f0a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d11c      	bne.n	8006ed8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d316      	bcc.n	8006ed8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d20f      	bcs.n	8006ed8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 ff65 	bl	8007d8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2100      	movs	r1, #0
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 fc75 	bl	80087c0 <USBD_LL_PrepareReceive>
 8006ed6:	e018      	b.n	8006f0a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d10b      	bne.n	8006efc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f001 fbb4 	bl	800866c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 ff93 	bl	8007e30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d122      	bne.n	8006f5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff fe98 	bl	8006c4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f22:	e01a      	b.n	8006f5a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d114      	bne.n	8006f5a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00e      	beq.n	8006f5a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	7afa      	ldrb	r2, [r7, #11]
 8006f46:	4611      	mov	r1, r2
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	4798      	blx	r3
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	e000      	b.n	8006f5c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e02f      	b.n	8006ff8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00f      	beq.n	8006fc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6852      	ldr	r2, [r2, #4]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fc2:	2340      	movs	r3, #64	; 0x40
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fb0a 	bl	80085e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2240      	movs	r2, #64	; 0x40
 8006fda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2180      	movs	r1, #128	; 0x80
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fafc 	bl	80085e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2240      	movs	r2, #64	; 0x40
 8006ff4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702e:	b2da      	uxtb	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b04      	cmp	r3, #4
 800705e:	d106      	bne.n	800706e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007066:	b2da      	uxtb	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	e012      	b.n	80070b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b03      	cmp	r3, #3
 800709c:	d10b      	bne.n	80070b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e014      	b.n	8007104 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d10d      	bne.n	8007102 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	4611      	mov	r1, r2
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	e014      	b.n	8007150 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d10d      	bne.n	800714e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d009      	beq.n	800719c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6852      	ldr	r2, [r2, #4]
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	4611      	mov	r1, r2
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
  }

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b087      	sub	sp, #28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	3301      	adds	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071c4:	8a3b      	ldrh	r3, [r7, #16]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	b21a      	sxth	r2, r3
 80071ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071d4:	89fb      	ldrh	r3, [r7, #14]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d005      	beq.n	800720a <USBD_StdDevReq+0x26>
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d853      	bhi.n	80072aa <USBD_StdDevReq+0xc6>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <USBD_StdDevReq+0x3a>
 8007206:	2b20      	cmp	r3, #32
 8007208:	d14f      	bne.n	80072aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
      break;
 800721c:	e04a      	b.n	80072b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b09      	cmp	r3, #9
 8007224:	d83b      	bhi.n	800729e <USBD_StdDevReq+0xba>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <USBD_StdDevReq+0x48>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007281 	.word	0x08007281
 8007230:	08007295 	.word	0x08007295
 8007234:	0800729f 	.word	0x0800729f
 8007238:	0800728b 	.word	0x0800728b
 800723c:	0800729f 	.word	0x0800729f
 8007240:	0800725f 	.word	0x0800725f
 8007244:	08007255 	.word	0x08007255
 8007248:	0800729f 	.word	0x0800729f
 800724c:	08007277 	.word	0x08007277
 8007250:	08007269 	.word	0x08007269
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9de 	bl	8007618 <USBD_GetDescriptor>
          break;
 800725c:	e024      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fb43 	bl	80078ec <USBD_SetAddress>
          break;
 8007266:	e01f      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb82 	bl	8007974 <USBD_SetConfig>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
          break;
 8007274:	e018      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc21 	bl	8007ac0 <USBD_GetConfig>
          break;
 800727e:	e013      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fc52 	bl	8007b2c <USBD_GetStatus>
          break;
 8007288:	e00e      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc81 	bl	8007b94 <USBD_SetFeature>
          break;
 8007292:	e009      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fc90 	bl	8007bbc <USBD_ClrFeature>
          break;
 800729c:	e004      	b.n	80072a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fce7 	bl	8007c74 <USBD_CtlError>
          break;
 80072a6:	bf00      	nop
      }
      break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fce1 	bl	8007c74 <USBD_CtlError>
      break;
 80072b2:	bf00      	nop
  }

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072d6:	2b40      	cmp	r3, #64	; 0x40
 80072d8:	d005      	beq.n	80072e6 <USBD_StdItfReq+0x26>
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d82f      	bhi.n	800733e <USBD_StdItfReq+0x7e>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <USBD_StdItfReq+0x26>
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d12b      	bne.n	800733e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d81d      	bhi.n	8007330 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	889b      	ldrh	r3, [r3, #4]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d813      	bhi.n	8007326 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	88db      	ldrh	r3, [r3, #6]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d110      	bne.n	800733a <USBD_StdItfReq+0x7a>
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10d      	bne.n	800733a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fd73 	bl	8007e0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007324:	e009      	b.n	800733a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fca3 	bl	8007c74 <USBD_CtlError>
          break;
 800732e:	e004      	b.n	800733a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc9e 	bl	8007c74 <USBD_CtlError>
          break;
 8007338:	e000      	b.n	800733c <USBD_StdItfReq+0x7c>
          break;
 800733a:	bf00      	nop
      }
      break;
 800733c:	e004      	b.n	8007348 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fc97 	bl	8007c74 <USBD_CtlError>
      break;
 8007346:	bf00      	nop
  }

  return ret;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	889b      	ldrh	r3, [r3, #4]
 8007364:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d007      	beq.n	8007382 <USBD_StdEPReq+0x30>
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	f200 8145 	bhi.w	8007602 <USBD_StdEPReq+0x2b0>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <USBD_StdEPReq+0x44>
 800737c:	2b20      	cmp	r3, #32
 800737e:	f040 8140 	bne.w	8007602 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]
      break;
 8007394:	e13a      	b.n	800760c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d007      	beq.n	80073ae <USBD_StdEPReq+0x5c>
 800739e:	2b03      	cmp	r3, #3
 80073a0:	f300 8129 	bgt.w	80075f6 <USBD_StdEPReq+0x2a4>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d07f      	beq.n	80074a8 <USBD_StdEPReq+0x156>
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d03c      	beq.n	8007426 <USBD_StdEPReq+0xd4>
 80073ac:	e123      	b.n	80075f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d002      	beq.n	80073c0 <USBD_StdEPReq+0x6e>
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d016      	beq.n	80073ec <USBD_StdEPReq+0x9a>
 80073be:	e02c      	b.n	800741a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00d      	beq.n	80073e2 <USBD_StdEPReq+0x90>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b80      	cmp	r3, #128	; 0x80
 80073ca:	d00a      	beq.n	80073e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 f94b 	bl	800866c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d6:	2180      	movs	r1, #128	; 0x80
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f947 	bl	800866c <USBD_LL_StallEP>
 80073de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e0:	e020      	b.n	8007424 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc45 	bl	8007c74 <USBD_CtlError>
              break;
 80073ea:	e01b      	b.n	8007424 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	885b      	ldrh	r3, [r3, #2]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10e      	bne.n	8007412 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <USBD_StdEPReq+0xc0>
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b80      	cmp	r3, #128	; 0x80
 80073fe:	d008      	beq.n	8007412 <USBD_StdEPReq+0xc0>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	88db      	ldrh	r3, [r3, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 f92d 	bl	800866c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fcf9 	bl	8007e0a <USBD_CtlSendStatus>

              break;
 8007418:	e004      	b.n	8007424 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fc29 	bl	8007c74 <USBD_CtlError>
              break;
 8007422:	bf00      	nop
          }
          break;
 8007424:	e0ec      	b.n	8007600 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d002      	beq.n	8007438 <USBD_StdEPReq+0xe6>
 8007432:	2b03      	cmp	r3, #3
 8007434:	d016      	beq.n	8007464 <USBD_StdEPReq+0x112>
 8007436:	e030      	b.n	800749a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00d      	beq.n	800745a <USBD_StdEPReq+0x108>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d00a      	beq.n	800745a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f90f 	bl	800866c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f90b 	bl	800866c <USBD_LL_StallEP>
 8007456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007458:	e025      	b.n	80074a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc09 	bl	8007c74 <USBD_CtlError>
              break;
 8007462:	e020      	b.n	80074a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	885b      	ldrh	r3, [r3, #2]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d11b      	bne.n	80074a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 f915 	bl	80086aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fcc2 	bl	8007e0a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007498:	e004      	b.n	80074a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fbe9 	bl	8007c74 <USBD_CtlError>
              break;
 80074a2:	e000      	b.n	80074a6 <USBD_StdEPReq+0x154>
              break;
 80074a4:	bf00      	nop
          }
          break;
 80074a6:	e0ab      	b.n	8007600 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d002      	beq.n	80074ba <USBD_StdEPReq+0x168>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d032      	beq.n	800751e <USBD_StdEPReq+0x1cc>
 80074b8:	e097      	b.n	80075ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <USBD_StdEPReq+0x17e>
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2b80      	cmp	r3, #128	; 0x80
 80074c4:	d004      	beq.n	80074d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fbd3 	bl	8007c74 <USBD_CtlError>
                break;
 80074ce:	e091      	b.n	80075f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da0b      	bge.n	80074f0 <USBD_StdEPReq+0x19e>
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	3310      	adds	r3, #16
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	3304      	adds	r3, #4
 80074ee:	e00b      	b.n	8007508 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	4413      	add	r3, r2
 8007506:	3304      	adds	r3, #4
 8007508:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2202      	movs	r2, #2
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc1d 	bl	8007d56 <USBD_CtlSendData>
              break;
 800751c:	e06a      	b.n	80075f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800751e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007522:	2b00      	cmp	r3, #0
 8007524:	da11      	bge.n	800754a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	f003 020f 	and.w	r2, r3, #15
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	3324      	adds	r3, #36	; 0x24
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d117      	bne.n	8007570 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fb96 	bl	8007c74 <USBD_CtlError>
                  break;
 8007548:	e054      	b.n	80075f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	f003 020f 	and.w	r2, r3, #15
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	440b      	add	r3, r1
 800755c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb83 	bl	8007c74 <USBD_CtlError>
                  break;
 800756e:	e041      	b.n	80075f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007574:	2b00      	cmp	r3, #0
 8007576:	da0b      	bge.n	8007590 <USBD_StdEPReq+0x23e>
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	3310      	adds	r3, #16
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4413      	add	r3, r2
 800758c:	3304      	adds	r3, #4
 800758e:	e00b      	b.n	80075a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	3304      	adds	r3, #4
 80075a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <USBD_StdEPReq+0x264>
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d103      	bne.n	80075be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e00e      	b.n	80075dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f890 	bl	80086e8 <USBD_LL_IsStallEP>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2201      	movs	r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	e002      	b.n	80075dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2202      	movs	r2, #2
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fbb7 	bl	8007d56 <USBD_CtlSendData>
              break;
 80075e8:	e004      	b.n	80075f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fb41 	bl	8007c74 <USBD_CtlError>
              break;
 80075f2:	bf00      	nop
          }
          break;
 80075f4:	e004      	b.n	8007600 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fb3b 	bl	8007c74 <USBD_CtlError>
          break;
 80075fe:	bf00      	nop
      }
      break;
 8007600:	e004      	b.n	800760c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fb35 	bl	8007c74 <USBD_CtlError>
      break;
 800760a:	bf00      	nop
  }

  return ret;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	0a1b      	lsrs	r3, r3, #8
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	2b06      	cmp	r3, #6
 800763a:	f200 8128 	bhi.w	800788e <USBD_GetDescriptor+0x276>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <USBD_GetDescriptor+0x2c>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007661 	.word	0x08007661
 8007648:	08007679 	.word	0x08007679
 800764c:	080076b9 	.word	0x080076b9
 8007650:	0800788f 	.word	0x0800788f
 8007654:	0800788f 	.word	0x0800788f
 8007658:	0800782f 	.word	0x0800782f
 800765c:	0800785b 	.word	0x0800785b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
      break;
 8007676:	e112      	b.n	800789e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	7c1b      	ldrb	r3, [r3, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10d      	bne.n	800769c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	f107 0208 	add.w	r2, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	2202      	movs	r2, #2
 8007698:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800769a:	e100      	b.n	800789e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	f107 0208 	add.w	r2, r7, #8
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	2202      	movs	r2, #2
 80076b4:	701a      	strb	r2, [r3, #0]
      break;
 80076b6:	e0f2      	b.n	800789e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	885b      	ldrh	r3, [r3, #2]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b05      	cmp	r3, #5
 80076c0:	f200 80ac 	bhi.w	800781c <USBD_GetDescriptor+0x204>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBD_GetDescriptor+0xb4>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076e5 	.word	0x080076e5
 80076d0:	08007719 	.word	0x08007719
 80076d4:	0800774d 	.word	0x0800774d
 80076d8:	08007781 	.word	0x08007781
 80076dc:	080077b5 	.word	0x080077b5
 80076e0:	080077e9 	.word	0x080077e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e091      	b.n	800782c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fab2 	bl	8007c74 <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e089      	b.n	800782c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773a:	e077      	b.n	800782c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa98 	bl	8007c74 <USBD_CtlError>
            err++;
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	3301      	adds	r3, #1
 8007748:	72fb      	strb	r3, [r7, #11]
          break;
 800774a:	e06f      	b.n	800782c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00b      	beq.n	8007770 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	7c12      	ldrb	r2, [r2, #16]
 8007764:	f107 0108 	add.w	r1, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776e:	e05d      	b.n	800782c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa7e 	bl	8007c74 <USBD_CtlError>
            err++;
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	3301      	adds	r3, #1
 800777c:	72fb      	strb	r3, [r7, #11]
          break;
 800777e:	e055      	b.n	800782c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	7c12      	ldrb	r2, [r2, #16]
 8007798:	f107 0108 	add.w	r1, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a2:	e043      	b.n	800782c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa64 	bl	8007c74 <USBD_CtlError>
            err++;
 80077ac:	7afb      	ldrb	r3, [r7, #11]
 80077ae:	3301      	adds	r3, #1
 80077b0:	72fb      	strb	r3, [r7, #11]
          break;
 80077b2:	e03b      	b.n	800782c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	7c12      	ldrb	r2, [r2, #16]
 80077cc:	f107 0108 	add.w	r1, r7, #8
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d6:	e029      	b.n	800782c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa4a 	bl	8007c74 <USBD_CtlError>
            err++;
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	3301      	adds	r3, #1
 80077e4:	72fb      	strb	r3, [r7, #11]
          break;
 80077e6:	e021      	b.n	800782c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00b      	beq.n	800780c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	7c12      	ldrb	r2, [r2, #16]
 8007800:	f107 0108 	add.w	r1, r7, #8
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
 8007808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800780a:	e00f      	b.n	800782c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa30 	bl	8007c74 <USBD_CtlError>
            err++;
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	3301      	adds	r3, #1
 8007818:	72fb      	strb	r3, [r7, #11]
          break;
 800781a:	e007      	b.n	800782c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa28 	bl	8007c74 <USBD_CtlError>
          err++;
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	3301      	adds	r3, #1
 8007828:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800782a:	bf00      	nop
      }
      break;
 800782c:	e037      	b.n	800789e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7c1b      	ldrb	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783e:	f107 0208 	add.w	r2, r7, #8
 8007842:	4610      	mov	r0, r2
 8007844:	4798      	blx	r3
 8007846:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007848:	e029      	b.n	800789e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fa11 	bl	8007c74 <USBD_CtlError>
        err++;
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	3301      	adds	r3, #1
 8007856:	72fb      	strb	r3, [r7, #11]
      break;
 8007858:	e021      	b.n	800789e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7c1b      	ldrb	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10d      	bne.n	800787e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f107 0208 	add.w	r2, r7, #8
 800786e:	4610      	mov	r0, r2
 8007870:	4798      	blx	r3
 8007872:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3301      	adds	r3, #1
 8007878:	2207      	movs	r2, #7
 800787a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800787c:	e00f      	b.n	800789e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f9f7 	bl	8007c74 <USBD_CtlError>
        err++;
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	3301      	adds	r3, #1
 800788a:	72fb      	strb	r3, [r7, #11]
      break;
 800788c:	e007      	b.n	800789e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f9ef 	bl	8007c74 <USBD_CtlError>
      err++;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	3301      	adds	r3, #1
 800789a:	72fb      	strb	r3, [r7, #11]
      break;
 800789c:	bf00      	nop
  }

  if (err != 0U)
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11e      	bne.n	80078e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	88db      	ldrh	r3, [r3, #6]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d016      	beq.n	80078da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078ac:	893b      	ldrh	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	88da      	ldrh	r2, [r3, #6]
 80078b6:	893b      	ldrh	r3, [r7, #8]
 80078b8:	4293      	cmp	r3, r2
 80078ba:	bf28      	it	cs
 80078bc:	4613      	movcs	r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078c2:	893b      	ldrh	r3, [r7, #8]
 80078c4:	461a      	mov	r2, r3
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa44 	bl	8007d56 <USBD_CtlSendData>
 80078ce:	e009      	b.n	80078e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9ce 	bl	8007c74 <USBD_CtlError>
 80078d8:	e004      	b.n	80078e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa95 	bl	8007e0a <USBD_CtlSendStatus>
 80078e0:	e000      	b.n	80078e4 <USBD_GetDescriptor+0x2cc>
    return;
 80078e2:	bf00      	nop
  }
}
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop

080078ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	889b      	ldrh	r3, [r3, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d131      	bne.n	8007962 <USBD_SetAddress+0x76>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	88db      	ldrh	r3, [r3, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d12d      	bne.n	8007962 <USBD_SetAddress+0x76>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	2b7f      	cmp	r3, #127	; 0x7f
 800790c:	d829      	bhi.n	8007962 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d104      	bne.n	8007930 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9a3 	bl	8007c74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792e:	e01d      	b.n	800796c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7bfa      	ldrb	r2, [r7, #15]
 8007934:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 feff 	bl	8008740 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa61 	bl	8007e0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007956:	e009      	b.n	800796c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	e004      	b.n	800796c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f985 	bl	8007c74 <USBD_CtlError>
  }
}
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	4b4c      	ldr	r3, [pc, #304]	; (8007abc <USBD_SetConfig+0x148>)
 800798a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800798c:	4b4b      	ldr	r3, [pc, #300]	; (8007abc <USBD_SetConfig+0x148>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d905      	bls.n	80079a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f96c 	bl	8007c74 <USBD_CtlError>
    return USBD_FAIL;
 800799c:	2303      	movs	r3, #3
 800799e:	e088      	b.n	8007ab2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d002      	beq.n	80079b2 <USBD_SetConfig+0x3e>
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d025      	beq.n	80079fc <USBD_SetConfig+0x88>
 80079b0:	e071      	b.n	8007a96 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079b2:	4b42      	ldr	r3, [pc, #264]	; (8007abc <USBD_SetConfig+0x148>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01c      	beq.n	80079f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80079ba:	4b40      	ldr	r3, [pc, #256]	; (8007abc <USBD_SetConfig+0x148>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c4:	4b3d      	ldr	r3, [pc, #244]	; (8007abc <USBD_SetConfig+0x148>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff f948 	bl	8006c60 <USBD_SetClassConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f949 	bl	8007c74 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079e2:	e065      	b.n	8007ab0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fa10 	bl	8007e0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2203      	movs	r2, #3
 80079ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079f2:	e05d      	b.n	8007ab0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa08 	bl	8007e0a <USBD_CtlSendStatus>
      break;
 80079fa:	e059      	b.n	8007ab0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079fc:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <USBD_SetConfig+0x148>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d112      	bne.n	8007a2a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <USBD_SetConfig+0x148>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <USBD_SetConfig+0x148>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff f93b 	bl	8006c98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f9f1 	bl	8007e0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a28:	e042      	b.n	8007ab0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <USBD_SetConfig+0x148>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d02a      	beq.n	8007a8e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff f929 	bl	8006c98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <USBD_SetConfig+0x148>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <USBD_SetConfig+0x148>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff f902 	bl	8006c60 <USBD_SetClassConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f903 	bl	8007c74 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff f90e 	bl	8006c98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a84:	e014      	b.n	8007ab0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9bf 	bl	8007e0a <USBD_CtlSendStatus>
      break;
 8007a8c:	e010      	b.n	8007ab0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9bb 	bl	8007e0a <USBD_CtlSendStatus>
      break;
 8007a94:	e00c      	b.n	8007ab0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f8eb 	bl	8007c74 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <USBD_SetConfig+0x148>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff f8f7 	bl	8006c98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	73fb      	strb	r3, [r7, #15]
      break;
 8007aae:	bf00      	nop
  }

  return ret;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000208 	.word	0x20000208

08007ac0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d004      	beq.n	8007adc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8cd 	bl	8007c74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ada:	e023      	b.n	8007b24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	dc02      	bgt.n	8007aee <USBD_GetConfig+0x2e>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	dc03      	bgt.n	8007af4 <USBD_GetConfig+0x34>
 8007aec:	e015      	b.n	8007b1a <USBD_GetConfig+0x5a>
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d00b      	beq.n	8007b0a <USBD_GetConfig+0x4a>
 8007af2:	e012      	b.n	8007b1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3308      	adds	r3, #8
 8007afe:	2201      	movs	r2, #1
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f927 	bl	8007d56 <USBD_CtlSendData>
        break;
 8007b08:	e00c      	b.n	8007b24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f91f 	bl	8007d56 <USBD_CtlSendData>
        break;
 8007b18:	e004      	b.n	8007b24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f8a9 	bl	8007c74 <USBD_CtlError>
        break;
 8007b22:	bf00      	nop
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d81e      	bhi.n	8007b82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	88db      	ldrh	r3, [r3, #6]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d004      	beq.n	8007b56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f890 	bl	8007c74 <USBD_CtlError>
        break;
 8007b54:	e01a      	b.n	8007b8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f043 0202 	orr.w	r2, r3, #2
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	330c      	adds	r3, #12
 8007b76:	2202      	movs	r2, #2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8eb 	bl	8007d56 <USBD_CtlSendData>
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f875 	bl	8007c74 <USBD_CtlError>
      break;
 8007b8a:	bf00      	nop
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d106      	bne.n	8007bb4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f92b 	bl	8007e0a <USBD_CtlSendStatus>
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d80b      	bhi.n	8007bec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	885b      	ldrh	r3, [r3, #2]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d10c      	bne.n	8007bf6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f910 	bl	8007e0a <USBD_CtlSendStatus>
      }
      break;
 8007bea:	e004      	b.n	8007bf6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f840 	bl	8007c74 <USBD_CtlError>
      break;
 8007bf4:	e000      	b.n	8007bf8 <USBD_ClrFeature+0x3c>
      break;
 8007bf6:	bf00      	nop
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	781a      	ldrb	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7ff fabb 	bl	80071a6 <SWAPBYTE>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff faae 	bl	80071a6 <SWAPBYTE>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3301      	adds	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff faa1 	bl	80071a6 <SWAPBYTE>
 8007c64:	4603      	mov	r3, r0
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	80da      	strh	r2, [r3, #6]
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c7e:	2180      	movs	r1, #128	; 0x80
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fcf3 	bl	800866c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c86:	2100      	movs	r1, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fcef 	bl	800866c <USBD_LL_StallEP>
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d036      	beq.n	8007d1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cb0:	6938      	ldr	r0, [r7, #16]
 8007cb2:	f000 f836 	bl	8007d22 <USBD_GetLen>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	3301      	adds	r3, #1
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	7812      	ldrb	r2, [r2, #0]
 8007cce:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	4413      	add	r3, r2
 8007cdc:	2203      	movs	r2, #3
 8007cde:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ce6:	e013      	b.n	8007d10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	613b      	str	r3, [r7, #16]
    idx++;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	4413      	add	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e7      	bne.n	8007ce8 <USBD_GetString+0x52>
 8007d18:	e000      	b.n	8007d1c <USBD_GetString+0x86>
    return;
 8007d1a:	bf00      	nop
  }
}
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d32:	e005      	b.n	8007d40 <USBD_GetLen+0x1e>
  {
    len++;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	3301      	adds	r3, #1
 8007d38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f5      	bne.n	8007d34 <USBD_GetLen+0x12>
  }

  return len;
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2202      	movs	r2, #2
 8007d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fcfe 	bl	800877e <USBD_LL_Transmit>

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fced 	bl	800877e <USBD_LL_Transmit>

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fcf1 	bl	80087c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fce0 	bl	80087c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2204      	movs	r2, #4
 8007e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fcac 	bl	800877e <USBD_LL_Transmit>

  return USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2205      	movs	r2, #5
 8007e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e40:	2300      	movs	r3, #0
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fcba 	bl	80087c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4912      	ldr	r1, [pc, #72]	; (8007ea8 <MX_USB_DEVICE_Init+0x50>)
 8007e60:	4812      	ldr	r0, [pc, #72]	; (8007eac <MX_USB_DEVICE_Init+0x54>)
 8007e62:	f7fe fe8f 	bl	8006b84 <USBD_Init>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e6c:	f7f9 f9e4 	bl	8001238 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e70:	490f      	ldr	r1, [pc, #60]	; (8007eb0 <MX_USB_DEVICE_Init+0x58>)
 8007e72:	480e      	ldr	r0, [pc, #56]	; (8007eac <MX_USB_DEVICE_Init+0x54>)
 8007e74:	f7fe feb6 	bl	8006be4 <USBD_RegisterClass>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e7e:	f7f9 f9db 	bl	8001238 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e82:	490c      	ldr	r1, [pc, #48]	; (8007eb4 <MX_USB_DEVICE_Init+0x5c>)
 8007e84:	4809      	ldr	r0, [pc, #36]	; (8007eac <MX_USB_DEVICE_Init+0x54>)
 8007e86:	f7fe fdd7 	bl	8006a38 <USBD_CDC_RegisterInterface>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e90:	f7f9 f9d2 	bl	8001238 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e94:	4805      	ldr	r0, [pc, #20]	; (8007eac <MX_USB_DEVICE_Init+0x54>)
 8007e96:	f7fe fecc 	bl	8006c32 <USBD_Start>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ea0:	f7f9 f9ca 	bl	8001238 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ea4:	bf00      	nop
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20000130 	.word	0x20000130
 8007eac:	20000678 	.word	0x20000678
 8007eb0:	20000018 	.word	0x20000018
 8007eb4:	2000011c 	.word	0x2000011c

08007eb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4905      	ldr	r1, [pc, #20]	; (8007ed4 <CDC_Init_FS+0x1c>)
 8007ec0:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <CDC_Init_FS+0x20>)
 8007ec2:	f7fe fdce 	bl	8006a62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ec6:	4905      	ldr	r1, [pc, #20]	; (8007edc <CDC_Init_FS+0x24>)
 8007ec8:	4803      	ldr	r0, [pc, #12]	; (8007ed8 <CDC_Init_FS+0x20>)
 8007eca:	f7fe fde8 	bl	8006a9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ece:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20001148 	.word	0x20001148
 8007ed8:	20000678 	.word	0x20000678
 8007edc:	20000948 	.word	0x20000948

08007ee0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ee4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
 8007efc:	4613      	mov	r3, r2
 8007efe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b23      	cmp	r3, #35	; 0x23
 8007f04:	d84a      	bhi.n	8007f9c <CDC_Control_FS+0xac>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <CDC_Control_FS+0x1c>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f9d 	.word	0x08007f9d
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007f9d 	.word	0x08007f9d
 8007f1c:	08007f9d 	.word	0x08007f9d
 8007f20:	08007f9d 	.word	0x08007f9d
 8007f24:	08007f9d 	.word	0x08007f9d
 8007f28:	08007f9d 	.word	0x08007f9d
 8007f2c:	08007f9d 	.word	0x08007f9d
 8007f30:	08007f9d 	.word	0x08007f9d
 8007f34:	08007f9d 	.word	0x08007f9d
 8007f38:	08007f9d 	.word	0x08007f9d
 8007f3c:	08007f9d 	.word	0x08007f9d
 8007f40:	08007f9d 	.word	0x08007f9d
 8007f44:	08007f9d 	.word	0x08007f9d
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007f9d 	.word	0x08007f9d
 8007f50:	08007f9d 	.word	0x08007f9d
 8007f54:	08007f9d 	.word	0x08007f9d
 8007f58:	08007f9d 	.word	0x08007f9d
 8007f5c:	08007f9d 	.word	0x08007f9d
 8007f60:	08007f9d 	.word	0x08007f9d
 8007f64:	08007f9d 	.word	0x08007f9d
 8007f68:	08007f9d 	.word	0x08007f9d
 8007f6c:	08007f9d 	.word	0x08007f9d
 8007f70:	08007f9d 	.word	0x08007f9d
 8007f74:	08007f9d 	.word	0x08007f9d
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007f9d 	.word	0x08007f9d
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	08007f9d 	.word	0x08007f9d
 8007f88:	08007f9d 	.word	0x08007f9d
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007f9d 	.word	0x08007f9d
 8007f94:	08007f9d 	.word	0x08007f9d
 8007f98:	08007f9d 	.word	0x08007f9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f9c:	bf00      	nop
  }

  return (USBD_OK);
 8007f9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4807      	ldr	r0, [pc, #28]	; (8007fd8 <CDC_Receive_FS+0x2c>)
 8007fba:	f7fe fd70 	bl	8006a9e <USBD_CDC_SetRxBuffer>

  CDC_Receive(Buf, Len);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7f8 fdfd 	bl	8000bc0 <CDC_Receive>

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fc6:	4804      	ldr	r0, [pc, #16]	; (8007fd8 <CDC_Receive_FS+0x2c>)
 8007fc8:	f7fe fdb2 	bl	8006b30 <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8007fcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000678 	.word	0x20000678

08007fdc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <CDC_Transmit_FS+0x48>)
 8007fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e00b      	b.n	800801a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	461a      	mov	r2, r3
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4806      	ldr	r0, [pc, #24]	; (8008024 <CDC_Transmit_FS+0x48>)
 800800a:	f7fe fd2a 	bl	8006a62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800800e:	4805      	ldr	r0, [pc, #20]	; (8008024 <CDC_Transmit_FS+0x48>)
 8008010:	f7fe fd5e 	bl	8006ad0 <USBD_CDC_TransmitPacket>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000678 	.word	0x20000678

08008028 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800803a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800803e:	4618      	mov	r0, r3
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2212      	movs	r2, #18
 800805c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800805e:	4b03      	ldr	r3, [pc, #12]	; (800806c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	2000014c 	.word	0x2000014c

08008070 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2204      	movs	r2, #4
 8008080:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008082:	4b03      	ldr	r3, [pc, #12]	; (8008090 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20000160 	.word	0x20000160

08008094 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	6039      	str	r1, [r7, #0]
 800809e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4907      	ldr	r1, [pc, #28]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080aa:	4808      	ldr	r0, [pc, #32]	; (80080cc <USBD_FS_ProductStrDescriptor+0x38>)
 80080ac:	f7ff fdf3 	bl	8007c96 <USBD_GetString>
 80080b0:	e004      	b.n	80080bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4904      	ldr	r1, [pc, #16]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080b6:	4805      	ldr	r0, [pc, #20]	; (80080cc <USBD_FS_ProductStrDescriptor+0x38>)
 80080b8:	f7ff fded 	bl	8007c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20001948 	.word	0x20001948
 80080cc:	08009218 	.word	0x08009218

080080d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	4904      	ldr	r1, [pc, #16]	; (80080f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080e0:	4804      	ldr	r0, [pc, #16]	; (80080f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080e2:	f7ff fdd8 	bl	8007c96 <USBD_GetString>
  return USBD_StrDesc;
 80080e6:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20001948 	.word	0x20001948
 80080f4:	08009230 	.word	0x08009230

080080f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	221a      	movs	r2, #26
 8008108:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800810a:	f000 f843 	bl	8008194 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800810e:	4b02      	ldr	r3, [pc, #8]	; (8008118 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20000164 	.word	0x20000164

0800811c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d105      	bne.n	800813a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4907      	ldr	r1, [pc, #28]	; (8008150 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008132:	4808      	ldr	r0, [pc, #32]	; (8008154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008134:	f7ff fdaf 	bl	8007c96 <USBD_GetString>
 8008138:	e004      	b.n	8008144 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4904      	ldr	r1, [pc, #16]	; (8008150 <USBD_FS_ConfigStrDescriptor+0x34>)
 800813e:	4805      	ldr	r0, [pc, #20]	; (8008154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008140:	f7ff fda9 	bl	8007c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008144:	4b02      	ldr	r3, [pc, #8]	; (8008150 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20001948 	.word	0x20001948
 8008154:	08009244 	.word	0x08009244

08008158 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4907      	ldr	r1, [pc, #28]	; (800818c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800816e:	4808      	ldr	r0, [pc, #32]	; (8008190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008170:	f7ff fd91 	bl	8007c96 <USBD_GetString>
 8008174:	e004      	b.n	8008180 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800817a:	4805      	ldr	r0, [pc, #20]	; (8008190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800817c:	f7ff fd8b 	bl	8007c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20001948 	.word	0x20001948
 8008190:	08009250 	.word	0x08009250

08008194 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <Get_SerialNum+0x44>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081a0:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <Get_SerialNum+0x48>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081a6:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <Get_SerialNum+0x4c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d009      	beq.n	80081ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081ba:	2208      	movs	r2, #8
 80081bc:	4909      	ldr	r1, [pc, #36]	; (80081e4 <Get_SerialNum+0x50>)
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f814 	bl	80081ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081c4:	2204      	movs	r2, #4
 80081c6:	4908      	ldr	r1, [pc, #32]	; (80081e8 <Get_SerialNum+0x54>)
 80081c8:	68b8      	ldr	r0, [r7, #8]
 80081ca:	f000 f80f 	bl	80081ec <IntToUnicode>
  }
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	1fff7a10 	.word	0x1fff7a10
 80081dc:	1fff7a14 	.word	0x1fff7a14
 80081e0:	1fff7a18 	.word	0x1fff7a18
 80081e4:	20000166 	.word	0x20000166
 80081e8:	20000176 	.word	0x20000176

080081ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]
 8008202:	e027      	b.n	8008254 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0f1b      	lsrs	r3, r3, #28
 8008208:	2b09      	cmp	r3, #9
 800820a:	d80b      	bhi.n	8008224 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	0f1b      	lsrs	r3, r3, #28
 8008210:	b2da      	uxtb	r2, r3
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4619      	mov	r1, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	440b      	add	r3, r1
 800821c:	3230      	adds	r2, #48	; 0x30
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e00a      	b.n	800823a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	0f1b      	lsrs	r3, r3, #28
 8008228:	b2da      	uxtb	r2, r3
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4619      	mov	r1, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	440b      	add	r3, r1
 8008234:	3237      	adds	r2, #55	; 0x37
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	3301      	adds	r3, #1
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4413      	add	r3, r2
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	3301      	adds	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]
 8008254:	7dfa      	ldrb	r2, [r7, #23]
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	429a      	cmp	r2, r3
 800825a:	d3d3      	bcc.n	8008204 <IntToUnicode+0x18>
  }
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	609a      	str	r2, [r3, #8]
 8008280:	60da      	str	r2, [r3, #12]
 8008282:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800828c:	d147      	bne.n	800831e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	4b25      	ldr	r3, [pc, #148]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	4a24      	ldr	r2, [pc, #144]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	6313      	str	r3, [r2, #48]	; 0x30
 800829e:	4b22      	ldr	r3, [pc, #136]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082b8:	f107 0314 	add.w	r3, r7, #20
 80082bc:	4619      	mov	r1, r3
 80082be:	481b      	ldr	r0, [pc, #108]	; (800832c <HAL_PCD_MspInit+0xc0>)
 80082c0:	f7fa f9e4 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ca:	2302      	movs	r3, #2
 80082cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082d2:	2300      	movs	r3, #0
 80082d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082d6:	230a      	movs	r3, #10
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	4619      	mov	r1, r3
 80082e0:	4812      	ldr	r0, [pc, #72]	; (800832c <HAL_PCD_MspInit+0xc0>)
 80082e2:	f7fa f9d3 	bl	800268c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082e6:	4b10      	ldr	r3, [pc, #64]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 80082ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f0:	6353      	str	r3, [r2, #52]	; 0x34
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	4a0b      	ldr	r2, [pc, #44]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 80082fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008300:	6453      	str	r3, [r2, #68]	; 0x44
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <HAL_PCD_MspInit+0xbc>)
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800830e:	2200      	movs	r2, #0
 8008310:	2100      	movs	r1, #0
 8008312:	2043      	movs	r0, #67	; 0x43
 8008314:	f7fa f975 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008318:	2043      	movs	r0, #67	; 0x43
 800831a:	f7fa f98e 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800831e:	bf00      	nop
 8008320:	3728      	adds	r7, #40	; 0x28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40023800 	.word	0x40023800
 800832c:	40020000 	.word	0x40020000

08008330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008344:	4619      	mov	r1, r3
 8008346:	4610      	mov	r0, r2
 8008348:	f7fe fcbe 	bl	8006cc8 <USBD_LL_SetupStage>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	4619      	mov	r1, r3
 800837e:	f7fe fcf8 	bl	8006d72 <USBD_LL_DataOutStage>
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	3348      	adds	r3, #72	; 0x48
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	4619      	mov	r1, r3
 80083b2:	f7fe fd41 	bl	8006e38 <USBD_LL_DataInStage>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fe55 	bl	800707c <USBD_LL_SOF>
}
 80083d2:	bf00      	nop
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
 80083f2:	e008      	b.n	8008406 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d102      	bne.n	8008402 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
 8008400:	e001      	b.n	8008406 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008402:	f7f8 ff19 	bl	8001238 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800840c:	7bfa      	ldrb	r2, [r7, #15]
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fdf5 	bl	8007000 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fda1 	bl	8006f64 <USBD_LL_Reset>
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fdf0 	bl	8007020 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <HAL_PCD_SuspendCallback+0x48>)
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	4a03      	ldr	r2, [pc, #12]	; (8008474 <HAL_PCD_SuspendCallback+0x48>)
 8008466:	f043 0306 	orr.w	r3, r3, #6
 800846a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	e000ed00 	.word	0xe000ed00

08008478 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fde0 	bl	800704c <USBD_LL_Resume>
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fe2e 	bl	800710c <USBD_LL_IsoOUTIncomplete>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ca:	78fa      	ldrb	r2, [r7, #3]
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fdf6 	bl	80070c0 <USBD_LL_IsoINIncomplete>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fe34 	bl	8007158 <USBD_LL_DevConnected>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fe31 	bl	800716e <USBD_LL_DevDisconnected>
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d13c      	bne.n	800859e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008524:	4a20      	ldr	r2, [pc, #128]	; (80085a8 <USBD_LL_Init+0x94>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <USBD_LL_Init+0x94>)
 8008530:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008534:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <USBD_LL_Init+0x94>)
 8008536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800853a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <USBD_LL_Init+0x94>)
 800853e:	2204      	movs	r2, #4
 8008540:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008542:	4b19      	ldr	r3, [pc, #100]	; (80085a8 <USBD_LL_Init+0x94>)
 8008544:	2202      	movs	r2, #2
 8008546:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <USBD_LL_Init+0x94>)
 800854a:	2200      	movs	r2, #0
 800854c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800854e:	4b16      	ldr	r3, [pc, #88]	; (80085a8 <USBD_LL_Init+0x94>)
 8008550:	2202      	movs	r2, #2
 8008552:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008554:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <USBD_LL_Init+0x94>)
 8008556:	2200      	movs	r2, #0
 8008558:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <USBD_LL_Init+0x94>)
 800855c:	2200      	movs	r2, #0
 800855e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008560:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <USBD_LL_Init+0x94>)
 8008562:	2200      	movs	r2, #0
 8008564:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008566:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <USBD_LL_Init+0x94>)
 8008568:	2201      	movs	r2, #1
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <USBD_LL_Init+0x94>)
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008572:	480d      	ldr	r0, [pc, #52]	; (80085a8 <USBD_LL_Init+0x94>)
 8008574:	f7fa fb3b 	bl	8002bee <HAL_PCD_Init>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800857e:	f7f8 fe5b 	bl	8001238 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	4808      	ldr	r0, [pc, #32]	; (80085a8 <USBD_LL_Init+0x94>)
 8008586:	f7fb fc98 	bl	8003eba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800858a:	2240      	movs	r2, #64	; 0x40
 800858c:	2100      	movs	r1, #0
 800858e:	4806      	ldr	r0, [pc, #24]	; (80085a8 <USBD_LL_Init+0x94>)
 8008590:	f7fb fc4c 	bl	8003e2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	2101      	movs	r1, #1
 8008598:	4803      	ldr	r0, [pc, #12]	; (80085a8 <USBD_LL_Init+0x94>)
 800859a:	f7fb fc47 	bl	8003e2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20001b48 	.word	0x20001b48

080085ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fa fc30 	bl	8002e28 <HAL_PCD_Start>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f942 	bl	8008858 <USBD_Get_USB_Status>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	70fb      	strb	r3, [r7, #3]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70bb      	strb	r3, [r7, #2]
 80085f8:	4613      	mov	r3, r2
 80085fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800860a:	78bb      	ldrb	r3, [r7, #2]
 800860c:	883a      	ldrh	r2, [r7, #0]
 800860e:	78f9      	ldrb	r1, [r7, #3]
 8008610:	f7fb f814 	bl	800363c <HAL_PCD_EP_Open>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f91c 	bl	8008858 <USBD_Get_USB_Status>
 8008620:	4603      	mov	r3, r0
 8008622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008624:	7bbb      	ldrb	r3, [r7, #14]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008648:	78fa      	ldrb	r2, [r7, #3]
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f7fb f85d 	bl	800370c <HAL_PCD_EP_Close>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f8fd 	bl	8008858 <USBD_Get_USB_Status>
 800865e:	4603      	mov	r3, r0
 8008660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008662:	7bbb      	ldrb	r3, [r7, #14]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f7fb f935 	bl	80038fa <HAL_PCD_EP_SetStall>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f8de 	bl	8008858 <USBD_Get_USB_Status>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fb f97a 	bl	80039c2 <HAL_PCD_EP_ClrStall>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f8bf 	bl	8008858 <USBD_Get_USB_Status>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086de:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da0b      	bge.n	800871c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	333e      	adds	r3, #62	; 0x3e
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	e00b      	b.n	8008734 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	4613      	mov	r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008732:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f7fa ff47 	bl	80035f2 <HAL_PCD_SetAddress>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f874 	bl	8008858 <USBD_Get_USB_Status>
 8008770:	4603      	mov	r3, r0
 8008772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008774:	7bbb      	ldrb	r3, [r7, #14]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b086      	sub	sp, #24
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
 800878a:	460b      	mov	r3, r1
 800878c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800879c:	7af9      	ldrb	r1, [r7, #11]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	f7fb f860 	bl	8003866 <HAL_PCD_EP_Transmit>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 f853 	bl	8008858 <USBD_Get_USB_Status>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	460b      	mov	r3, r1
 80087ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087de:	7af9      	ldrb	r1, [r7, #11]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	f7fa ffdc 	bl	80037a0 <HAL_PCD_EP_Receive>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f832 	bl	8008858 <USBD_Get_USB_Status>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	4611      	mov	r1, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f7fb f80c 	bl	8003836 <HAL_PCD_EP_GetRxCount>
 800881e:	4603      	mov	r3, r0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008830:	4b03      	ldr	r3, [pc, #12]	; (8008840 <USBD_static_malloc+0x18>)
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	2000020c 	.word	0x2000020c

08008844 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	2b03      	cmp	r3, #3
 800886a:	d817      	bhi.n	800889c <USBD_Get_USB_Status+0x44>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBD_Get_USB_Status+0x1c>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	08008885 	.word	0x08008885
 8008878:	0800888b 	.word	0x0800888b
 800887c:	08008891 	.word	0x08008891
 8008880:	08008897 	.word	0x08008897
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	e00b      	b.n	80088a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	73fb      	strb	r3, [r7, #15]
    break;
 800888e:	e008      	b.n	80088a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	e005      	b.n	80088a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008896:	2303      	movs	r3, #3
 8008898:	73fb      	strb	r3, [r7, #15]
    break;
 800889a:	e002      	b.n	80088a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	bf00      	nop
  }
  return usb_status;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <__errno>:
 80088b0:	4b01      	ldr	r3, [pc, #4]	; (80088b8 <__errno+0x8>)
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20000180 	.word	0x20000180

080088bc <__libc_init_array>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4d0d      	ldr	r5, [pc, #52]	; (80088f4 <__libc_init_array+0x38>)
 80088c0:	4c0d      	ldr	r4, [pc, #52]	; (80088f8 <__libc_init_array+0x3c>)
 80088c2:	1b64      	subs	r4, r4, r5
 80088c4:	10a4      	asrs	r4, r4, #2
 80088c6:	2600      	movs	r6, #0
 80088c8:	42a6      	cmp	r6, r4
 80088ca:	d109      	bne.n	80088e0 <__libc_init_array+0x24>
 80088cc:	4d0b      	ldr	r5, [pc, #44]	; (80088fc <__libc_init_array+0x40>)
 80088ce:	4c0c      	ldr	r4, [pc, #48]	; (8008900 <__libc_init_array+0x44>)
 80088d0:	f000 fc4e 	bl	8009170 <_init>
 80088d4:	1b64      	subs	r4, r4, r5
 80088d6:	10a4      	asrs	r4, r4, #2
 80088d8:	2600      	movs	r6, #0
 80088da:	42a6      	cmp	r6, r4
 80088dc:	d105      	bne.n	80088ea <__libc_init_array+0x2e>
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e4:	4798      	blx	r3
 80088e6:	3601      	adds	r6, #1
 80088e8:	e7ee      	b.n	80088c8 <__libc_init_array+0xc>
 80088ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ee:	4798      	blx	r3
 80088f0:	3601      	adds	r6, #1
 80088f2:	e7f2      	b.n	80088da <__libc_init_array+0x1e>
 80088f4:	080092ac 	.word	0x080092ac
 80088f8:	080092ac 	.word	0x080092ac
 80088fc:	080092ac 	.word	0x080092ac
 8008900:	080092b0 	.word	0x080092b0

08008904 <memset>:
 8008904:	4402      	add	r2, r0
 8008906:	4603      	mov	r3, r0
 8008908:	4293      	cmp	r3, r2
 800890a:	d100      	bne.n	800890e <memset+0xa>
 800890c:	4770      	bx	lr
 800890e:	f803 1b01 	strb.w	r1, [r3], #1
 8008912:	e7f9      	b.n	8008908 <memset+0x4>

08008914 <siprintf>:
 8008914:	b40e      	push	{r1, r2, r3}
 8008916:	b500      	push	{lr}
 8008918:	b09c      	sub	sp, #112	; 0x70
 800891a:	ab1d      	add	r3, sp, #116	; 0x74
 800891c:	9002      	str	r0, [sp, #8]
 800891e:	9006      	str	r0, [sp, #24]
 8008920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008924:	4809      	ldr	r0, [pc, #36]	; (800894c <siprintf+0x38>)
 8008926:	9107      	str	r1, [sp, #28]
 8008928:	9104      	str	r1, [sp, #16]
 800892a:	4909      	ldr	r1, [pc, #36]	; (8008950 <siprintf+0x3c>)
 800892c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008930:	9105      	str	r1, [sp, #20]
 8008932:	6800      	ldr	r0, [r0, #0]
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	a902      	add	r1, sp, #8
 8008938:	f000 f868 	bl	8008a0c <_svfiprintf_r>
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	b01c      	add	sp, #112	; 0x70
 8008944:	f85d eb04 	ldr.w	lr, [sp], #4
 8008948:	b003      	add	sp, #12
 800894a:	4770      	bx	lr
 800894c:	20000180 	.word	0x20000180
 8008950:	ffff0208 	.word	0xffff0208

08008954 <__ssputs_r>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	688e      	ldr	r6, [r1, #8]
 800895a:	429e      	cmp	r6, r3
 800895c:	4682      	mov	sl, r0
 800895e:	460c      	mov	r4, r1
 8008960:	4690      	mov	r8, r2
 8008962:	461f      	mov	r7, r3
 8008964:	d838      	bhi.n	80089d8 <__ssputs_r+0x84>
 8008966:	898a      	ldrh	r2, [r1, #12]
 8008968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800896c:	d032      	beq.n	80089d4 <__ssputs_r+0x80>
 800896e:	6825      	ldr	r5, [r4, #0]
 8008970:	6909      	ldr	r1, [r1, #16]
 8008972:	eba5 0901 	sub.w	r9, r5, r1
 8008976:	6965      	ldr	r5, [r4, #20]
 8008978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800897c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008980:	3301      	adds	r3, #1
 8008982:	444b      	add	r3, r9
 8008984:	106d      	asrs	r5, r5, #1
 8008986:	429d      	cmp	r5, r3
 8008988:	bf38      	it	cc
 800898a:	461d      	movcc	r5, r3
 800898c:	0553      	lsls	r3, r2, #21
 800898e:	d531      	bpl.n	80089f4 <__ssputs_r+0xa0>
 8008990:	4629      	mov	r1, r5
 8008992:	f000 fb47 	bl	8009024 <_malloc_r>
 8008996:	4606      	mov	r6, r0
 8008998:	b950      	cbnz	r0, 80089b0 <__ssputs_r+0x5c>
 800899a:	230c      	movs	r3, #12
 800899c:	f8ca 3000 	str.w	r3, [sl]
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	6921      	ldr	r1, [r4, #16]
 80089b2:	464a      	mov	r2, r9
 80089b4:	f000 fabe 	bl	8008f34 <memcpy>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	6126      	str	r6, [r4, #16]
 80089c6:	6165      	str	r5, [r4, #20]
 80089c8:	444e      	add	r6, r9
 80089ca:	eba5 0509 	sub.w	r5, r5, r9
 80089ce:	6026      	str	r6, [r4, #0]
 80089d0:	60a5      	str	r5, [r4, #8]
 80089d2:	463e      	mov	r6, r7
 80089d4:	42be      	cmp	r6, r7
 80089d6:	d900      	bls.n	80089da <__ssputs_r+0x86>
 80089d8:	463e      	mov	r6, r7
 80089da:	4632      	mov	r2, r6
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	4641      	mov	r1, r8
 80089e0:	f000 fab6 	bl	8008f50 <memmove>
 80089e4:	68a3      	ldr	r3, [r4, #8]
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	1b9b      	subs	r3, r3, r6
 80089ea:	4432      	add	r2, r6
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6022      	str	r2, [r4, #0]
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7db      	b.n	80089ac <__ssputs_r+0x58>
 80089f4:	462a      	mov	r2, r5
 80089f6:	f000 fb6f 	bl	80090d8 <_realloc_r>
 80089fa:	4606      	mov	r6, r0
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d1e1      	bne.n	80089c4 <__ssputs_r+0x70>
 8008a00:	6921      	ldr	r1, [r4, #16]
 8008a02:	4650      	mov	r0, sl
 8008a04:	f000 fabe 	bl	8008f84 <_free_r>
 8008a08:	e7c7      	b.n	800899a <__ssputs_r+0x46>
	...

08008a0c <_svfiprintf_r>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	4698      	mov	r8, r3
 8008a12:	898b      	ldrh	r3, [r1, #12]
 8008a14:	061b      	lsls	r3, r3, #24
 8008a16:	b09d      	sub	sp, #116	; 0x74
 8008a18:	4607      	mov	r7, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	d50e      	bpl.n	8008a3e <_svfiprintf_r+0x32>
 8008a20:	690b      	ldr	r3, [r1, #16]
 8008a22:	b963      	cbnz	r3, 8008a3e <_svfiprintf_r+0x32>
 8008a24:	2140      	movs	r1, #64	; 0x40
 8008a26:	f000 fafd 	bl	8009024 <_malloc_r>
 8008a2a:	6028      	str	r0, [r5, #0]
 8008a2c:	6128      	str	r0, [r5, #16]
 8008a2e:	b920      	cbnz	r0, 8008a3a <_svfiprintf_r+0x2e>
 8008a30:	230c      	movs	r3, #12
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	e0d1      	b.n	8008bde <_svfiprintf_r+0x1d2>
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	616b      	str	r3, [r5, #20]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	2320      	movs	r3, #32
 8008a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a4c:	2330      	movs	r3, #48	; 0x30
 8008a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bf8 <_svfiprintf_r+0x1ec>
 8008a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a56:	f04f 0901 	mov.w	r9, #1
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	469a      	mov	sl, r3
 8008a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a62:	b10a      	cbz	r2, 8008a68 <_svfiprintf_r+0x5c>
 8008a64:	2a25      	cmp	r2, #37	; 0x25
 8008a66:	d1f9      	bne.n	8008a5c <_svfiprintf_r+0x50>
 8008a68:	ebba 0b04 	subs.w	fp, sl, r4
 8008a6c:	d00b      	beq.n	8008a86 <_svfiprintf_r+0x7a>
 8008a6e:	465b      	mov	r3, fp
 8008a70:	4622      	mov	r2, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ff6d 	bl	8008954 <__ssputs_r>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f000 80aa 	beq.w	8008bd4 <_svfiprintf_r+0x1c8>
 8008a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a82:	445a      	add	r2, fp
 8008a84:	9209      	str	r2, [sp, #36]	; 0x24
 8008a86:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80a2 	beq.w	8008bd4 <_svfiprintf_r+0x1c8>
 8008a90:	2300      	movs	r3, #0
 8008a92:	f04f 32ff 	mov.w	r2, #4294967295
 8008a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a9a:	f10a 0a01 	add.w	sl, sl, #1
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	9307      	str	r3, [sp, #28]
 8008aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8008aa8:	4654      	mov	r4, sl
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab0:	4851      	ldr	r0, [pc, #324]	; (8008bf8 <_svfiprintf_r+0x1ec>)
 8008ab2:	f7f7 fb8d 	bl	80001d0 <memchr>
 8008ab6:	9a04      	ldr	r2, [sp, #16]
 8008ab8:	b9d8      	cbnz	r0, 8008af2 <_svfiprintf_r+0xe6>
 8008aba:	06d0      	lsls	r0, r2, #27
 8008abc:	bf44      	itt	mi
 8008abe:	2320      	movmi	r3, #32
 8008ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac4:	0711      	lsls	r1, r2, #28
 8008ac6:	bf44      	itt	mi
 8008ac8:	232b      	movmi	r3, #43	; 0x2b
 8008aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ace:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad4:	d015      	beq.n	8008b02 <_svfiprintf_r+0xf6>
 8008ad6:	9a07      	ldr	r2, [sp, #28]
 8008ad8:	4654      	mov	r4, sl
 8008ada:	2000      	movs	r0, #0
 8008adc:	f04f 0c0a 	mov.w	ip, #10
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae6:	3b30      	subs	r3, #48	; 0x30
 8008ae8:	2b09      	cmp	r3, #9
 8008aea:	d94e      	bls.n	8008b8a <_svfiprintf_r+0x17e>
 8008aec:	b1b0      	cbz	r0, 8008b1c <_svfiprintf_r+0x110>
 8008aee:	9207      	str	r2, [sp, #28]
 8008af0:	e014      	b.n	8008b1c <_svfiprintf_r+0x110>
 8008af2:	eba0 0308 	sub.w	r3, r0, r8
 8008af6:	fa09 f303 	lsl.w	r3, r9, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	46a2      	mov	sl, r4
 8008b00:	e7d2      	b.n	8008aa8 <_svfiprintf_r+0x9c>
 8008b02:	9b03      	ldr	r3, [sp, #12]
 8008b04:	1d19      	adds	r1, r3, #4
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	9103      	str	r1, [sp, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bfbb      	ittet	lt
 8008b0e:	425b      	neglt	r3, r3
 8008b10:	f042 0202 	orrlt.w	r2, r2, #2
 8008b14:	9307      	strge	r3, [sp, #28]
 8008b16:	9307      	strlt	r3, [sp, #28]
 8008b18:	bfb8      	it	lt
 8008b1a:	9204      	strlt	r2, [sp, #16]
 8008b1c:	7823      	ldrb	r3, [r4, #0]
 8008b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b20:	d10c      	bne.n	8008b3c <_svfiprintf_r+0x130>
 8008b22:	7863      	ldrb	r3, [r4, #1]
 8008b24:	2b2a      	cmp	r3, #42	; 0x2a
 8008b26:	d135      	bne.n	8008b94 <_svfiprintf_r+0x188>
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	1d1a      	adds	r2, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	9203      	str	r2, [sp, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfb8      	it	lt
 8008b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b38:	3402      	adds	r4, #2
 8008b3a:	9305      	str	r3, [sp, #20]
 8008b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c08 <_svfiprintf_r+0x1fc>
 8008b40:	7821      	ldrb	r1, [r4, #0]
 8008b42:	2203      	movs	r2, #3
 8008b44:	4650      	mov	r0, sl
 8008b46:	f7f7 fb43 	bl	80001d0 <memchr>
 8008b4a:	b140      	cbz	r0, 8008b5e <_svfiprintf_r+0x152>
 8008b4c:	2340      	movs	r3, #64	; 0x40
 8008b4e:	eba0 000a 	sub.w	r0, r0, sl
 8008b52:	fa03 f000 	lsl.w	r0, r3, r0
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	4303      	orrs	r3, r0
 8008b5a:	3401      	adds	r4, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b62:	4826      	ldr	r0, [pc, #152]	; (8008bfc <_svfiprintf_r+0x1f0>)
 8008b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b68:	2206      	movs	r2, #6
 8008b6a:	f7f7 fb31 	bl	80001d0 <memchr>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d038      	beq.n	8008be4 <_svfiprintf_r+0x1d8>
 8008b72:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <_svfiprintf_r+0x1f4>)
 8008b74:	bb1b      	cbnz	r3, 8008bbe <_svfiprintf_r+0x1b2>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	3307      	adds	r3, #7
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	3308      	adds	r3, #8
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	4433      	add	r3, r6
 8008b86:	9309      	str	r3, [sp, #36]	; 0x24
 8008b88:	e767      	b.n	8008a5a <_svfiprintf_r+0x4e>
 8008b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2001      	movs	r0, #1
 8008b92:	e7a5      	b.n	8008ae0 <_svfiprintf_r+0xd4>
 8008b94:	2300      	movs	r3, #0
 8008b96:	3401      	adds	r4, #1
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f04f 0c0a 	mov.w	ip, #10
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ba6:	3a30      	subs	r2, #48	; 0x30
 8008ba8:	2a09      	cmp	r2, #9
 8008baa:	d903      	bls.n	8008bb4 <_svfiprintf_r+0x1a8>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0c5      	beq.n	8008b3c <_svfiprintf_r+0x130>
 8008bb0:	9105      	str	r1, [sp, #20]
 8008bb2:	e7c3      	b.n	8008b3c <_svfiprintf_r+0x130>
 8008bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bb8:	4604      	mov	r4, r0
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7f0      	b.n	8008ba0 <_svfiprintf_r+0x194>
 8008bbe:	ab03      	add	r3, sp, #12
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <_svfiprintf_r+0x1f8>)
 8008bc6:	a904      	add	r1, sp, #16
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f3af 8000 	nop.w
 8008bce:	1c42      	adds	r2, r0, #1
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	d1d6      	bne.n	8008b82 <_svfiprintf_r+0x176>
 8008bd4:	89ab      	ldrh	r3, [r5, #12]
 8008bd6:	065b      	lsls	r3, r3, #25
 8008bd8:	f53f af2c 	bmi.w	8008a34 <_svfiprintf_r+0x28>
 8008bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bde:	b01d      	add	sp, #116	; 0x74
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	ab03      	add	r3, sp, #12
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	462a      	mov	r2, r5
 8008bea:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <_svfiprintf_r+0x1f8>)
 8008bec:	a904      	add	r1, sp, #16
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f000 f87a 	bl	8008ce8 <_printf_i>
 8008bf4:	e7eb      	b.n	8008bce <_svfiprintf_r+0x1c2>
 8008bf6:	bf00      	nop
 8008bf8:	08009270 	.word	0x08009270
 8008bfc:	0800927a 	.word	0x0800927a
 8008c00:	00000000 	.word	0x00000000
 8008c04:	08008955 	.word	0x08008955
 8008c08:	08009276 	.word	0x08009276

08008c0c <_printf_common>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	4616      	mov	r6, r2
 8008c12:	4699      	mov	r9, r3
 8008c14:	688a      	ldr	r2, [r1, #8]
 8008c16:	690b      	ldr	r3, [r1, #16]
 8008c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	bfb8      	it	lt
 8008c20:	4613      	movlt	r3, r2
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c28:	4607      	mov	r7, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b10a      	cbz	r2, 8008c32 <_printf_common+0x26>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	6833      	ldrmi	r3, [r6, #0]
 8008c3a:	3302      	addmi	r3, #2
 8008c3c:	6033      	strmi	r3, [r6, #0]
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	f015 0506 	ands.w	r5, r5, #6
 8008c44:	d106      	bne.n	8008c54 <_printf_common+0x48>
 8008c46:	f104 0a19 	add.w	sl, r4, #25
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	6832      	ldr	r2, [r6, #0]
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc26      	bgt.n	8008ca2 <_printf_common+0x96>
 8008c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c58:	1e13      	subs	r3, r2, #0
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	bf18      	it	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	0692      	lsls	r2, r2, #26
 8008c62:	d42b      	bmi.n	8008cbc <_printf_common+0xb0>
 8008c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c68:	4649      	mov	r1, r9
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d01e      	beq.n	8008cb0 <_printf_common+0xa4>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	68e5      	ldr	r5, [r4, #12]
 8008c76:	6832      	ldr	r2, [r6, #0]
 8008c78:	f003 0306 	and.w	r3, r3, #6
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	bf08      	it	eq
 8008c80:	1aad      	subeq	r5, r5, r2
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	2600      	movs	r6, #0
 8008c98:	341a      	adds	r4, #26
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	d11a      	bne.n	8008cd4 <_printf_common+0xc8>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e008      	b.n	8008cb4 <_printf_common+0xa8>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4638      	mov	r0, r7
 8008caa:	47c0      	blx	r8
 8008cac:	3001      	adds	r0, #1
 8008cae:	d103      	bne.n	8008cb8 <_printf_common+0xac>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7c6      	b.n	8008c4a <_printf_common+0x3e>
 8008cbc:	18e1      	adds	r1, r4, r3
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	2030      	movs	r0, #48	; 0x30
 8008cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cc6:	4422      	add	r2, r4
 8008cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	e7c7      	b.n	8008c64 <_printf_common+0x58>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c0      	blx	r8
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d0e6      	beq.n	8008cb0 <_printf_common+0xa4>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7d9      	b.n	8008c9a <_printf_common+0x8e>
	...

08008ce8 <_printf_i>:
 8008ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	4691      	mov	r9, r2
 8008cf0:	7e27      	ldrb	r7, [r4, #24]
 8008cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cf4:	2f78      	cmp	r7, #120	; 0x78
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cfe:	d807      	bhi.n	8008d10 <_printf_i+0x28>
 8008d00:	2f62      	cmp	r7, #98	; 0x62
 8008d02:	d80a      	bhi.n	8008d1a <_printf_i+0x32>
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	f000 80d8 	beq.w	8008eba <_printf_i+0x1d2>
 8008d0a:	2f58      	cmp	r7, #88	; 0x58
 8008d0c:	f000 80a3 	beq.w	8008e56 <_printf_i+0x16e>
 8008d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d18:	e03a      	b.n	8008d90 <_printf_i+0xa8>
 8008d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d1e:	2b15      	cmp	r3, #21
 8008d20:	d8f6      	bhi.n	8008d10 <_printf_i+0x28>
 8008d22:	a001      	add	r0, pc, #4	; (adr r0, 8008d28 <_printf_i+0x40>)
 8008d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d28:	08008d81 	.word	0x08008d81
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d11 	.word	0x08008d11
 8008d34:	08008d11 	.word	0x08008d11
 8008d38:	08008d11 	.word	0x08008d11
 8008d3c:	08008d11 	.word	0x08008d11
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d11 	.word	0x08008d11
 8008d48:	08008d11 	.word	0x08008d11
 8008d4c:	08008d11 	.word	0x08008d11
 8008d50:	08008d11 	.word	0x08008d11
 8008d54:	08008ea1 	.word	0x08008ea1
 8008d58:	08008dc5 	.word	0x08008dc5
 8008d5c:	08008e83 	.word	0x08008e83
 8008d60:	08008d11 	.word	0x08008d11
 8008d64:	08008d11 	.word	0x08008d11
 8008d68:	08008ec3 	.word	0x08008ec3
 8008d6c:	08008d11 	.word	0x08008d11
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008d11 	.word	0x08008d11
 8008d78:	08008d11 	.word	0x08008d11
 8008d7c:	08008e8b 	.word	0x08008e8b
 8008d80:	680b      	ldr	r3, [r1, #0]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	600a      	str	r2, [r1, #0]
 8008d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0a3      	b.n	8008edc <_printf_i+0x1f4>
 8008d94:	6825      	ldr	r5, [r4, #0]
 8008d96:	6808      	ldr	r0, [r1, #0]
 8008d98:	062e      	lsls	r6, r5, #24
 8008d9a:	f100 0304 	add.w	r3, r0, #4
 8008d9e:	d50a      	bpl.n	8008db6 <_printf_i+0xce>
 8008da0:	6805      	ldr	r5, [r0, #0]
 8008da2:	600b      	str	r3, [r1, #0]
 8008da4:	2d00      	cmp	r5, #0
 8008da6:	da03      	bge.n	8008db0 <_printf_i+0xc8>
 8008da8:	232d      	movs	r3, #45	; 0x2d
 8008daa:	426d      	negs	r5, r5
 8008dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db0:	485e      	ldr	r0, [pc, #376]	; (8008f2c <_printf_i+0x244>)
 8008db2:	230a      	movs	r3, #10
 8008db4:	e019      	b.n	8008dea <_printf_i+0x102>
 8008db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dba:	6805      	ldr	r5, [r0, #0]
 8008dbc:	600b      	str	r3, [r1, #0]
 8008dbe:	bf18      	it	ne
 8008dc0:	b22d      	sxthne	r5, r5
 8008dc2:	e7ef      	b.n	8008da4 <_printf_i+0xbc>
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	6825      	ldr	r5, [r4, #0]
 8008dc8:	1d18      	adds	r0, r3, #4
 8008dca:	6008      	str	r0, [r1, #0]
 8008dcc:	0628      	lsls	r0, r5, #24
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0xec>
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0xf2>
 8008dd4:	0669      	lsls	r1, r5, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0xe8>
 8008dd8:	881d      	ldrh	r5, [r3, #0]
 8008dda:	4854      	ldr	r0, [pc, #336]	; (8008f2c <_printf_i+0x244>)
 8008ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8008dde:	bf0c      	ite	eq
 8008de0:	2308      	moveq	r3, #8
 8008de2:	230a      	movne	r3, #10
 8008de4:	2100      	movs	r1, #0
 8008de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dea:	6866      	ldr	r6, [r4, #4]
 8008dec:	60a6      	str	r6, [r4, #8]
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	bfa2      	ittt	ge
 8008df2:	6821      	ldrge	r1, [r4, #0]
 8008df4:	f021 0104 	bicge.w	r1, r1, #4
 8008df8:	6021      	strge	r1, [r4, #0]
 8008dfa:	b90d      	cbnz	r5, 8008e00 <_printf_i+0x118>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d04d      	beq.n	8008e9c <_printf_i+0x1b4>
 8008e00:	4616      	mov	r6, r2
 8008e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e06:	fb03 5711 	mls	r7, r3, r1, r5
 8008e0a:	5dc7      	ldrb	r7, [r0, r7]
 8008e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e10:	462f      	mov	r7, r5
 8008e12:	42bb      	cmp	r3, r7
 8008e14:	460d      	mov	r5, r1
 8008e16:	d9f4      	bls.n	8008e02 <_printf_i+0x11a>
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d10b      	bne.n	8008e34 <_printf_i+0x14c>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	07df      	lsls	r7, r3, #31
 8008e20:	d508      	bpl.n	8008e34 <_printf_i+0x14c>
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4299      	cmp	r1, r3
 8008e28:	bfde      	ittt	le
 8008e2a:	2330      	movle	r3, #48	; 0x30
 8008e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e34:	1b92      	subs	r2, r2, r6
 8008e36:	6122      	str	r2, [r4, #16]
 8008e38:	f8cd a000 	str.w	sl, [sp]
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	aa03      	add	r2, sp, #12
 8008e40:	4621      	mov	r1, r4
 8008e42:	4640      	mov	r0, r8
 8008e44:	f7ff fee2 	bl	8008c0c <_printf_common>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d14c      	bne.n	8008ee6 <_printf_i+0x1fe>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	b004      	add	sp, #16
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	4835      	ldr	r0, [pc, #212]	; (8008f2c <_printf_i+0x244>)
 8008e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	680e      	ldr	r6, [r1, #0]
 8008e60:	061f      	lsls	r7, r3, #24
 8008e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e66:	600e      	str	r6, [r1, #0]
 8008e68:	d514      	bpl.n	8008e94 <_printf_i+0x1ac>
 8008e6a:	07d9      	lsls	r1, r3, #31
 8008e6c:	bf44      	itt	mi
 8008e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e72:	6023      	strmi	r3, [r4, #0]
 8008e74:	b91d      	cbnz	r5, 8008e7e <_printf_i+0x196>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	f023 0320 	bic.w	r3, r3, #32
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e7b0      	b.n	8008de4 <_printf_i+0xfc>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f043 0320 	orr.w	r3, r3, #32
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	2378      	movs	r3, #120	; 0x78
 8008e8c:	4828      	ldr	r0, [pc, #160]	; (8008f30 <_printf_i+0x248>)
 8008e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e92:	e7e3      	b.n	8008e5c <_printf_i+0x174>
 8008e94:	065e      	lsls	r6, r3, #25
 8008e96:	bf48      	it	mi
 8008e98:	b2ad      	uxthmi	r5, r5
 8008e9a:	e7e6      	b.n	8008e6a <_printf_i+0x182>
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	e7bb      	b.n	8008e18 <_printf_i+0x130>
 8008ea0:	680b      	ldr	r3, [r1, #0]
 8008ea2:	6826      	ldr	r6, [r4, #0]
 8008ea4:	6960      	ldr	r0, [r4, #20]
 8008ea6:	1d1d      	adds	r5, r3, #4
 8008ea8:	600d      	str	r5, [r1, #0]
 8008eaa:	0635      	lsls	r5, r6, #24
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	d501      	bpl.n	8008eb4 <_printf_i+0x1cc>
 8008eb0:	6018      	str	r0, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <_printf_i+0x1d2>
 8008eb4:	0671      	lsls	r1, r6, #25
 8008eb6:	d5fb      	bpl.n	8008eb0 <_printf_i+0x1c8>
 8008eb8:	8018      	strh	r0, [r3, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	4616      	mov	r6, r2
 8008ec0:	e7ba      	b.n	8008e38 <_printf_i+0x150>
 8008ec2:	680b      	ldr	r3, [r1, #0]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	600a      	str	r2, [r1, #0]
 8008ec8:	681e      	ldr	r6, [r3, #0]
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7f7 f97e 	bl	80001d0 <memchr>
 8008ed4:	b108      	cbz	r0, 8008eda <_printf_i+0x1f2>
 8008ed6:	1b80      	subs	r0, r0, r6
 8008ed8:	6060      	str	r0, [r4, #4]
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ee4:	e7a8      	b.n	8008e38 <_printf_i+0x150>
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4649      	mov	r1, r9
 8008eec:	4640      	mov	r0, r8
 8008eee:	47d0      	blx	sl
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d0ab      	beq.n	8008e4c <_printf_i+0x164>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	079b      	lsls	r3, r3, #30
 8008ef8:	d413      	bmi.n	8008f22 <_printf_i+0x23a>
 8008efa:	68e0      	ldr	r0, [r4, #12]
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	4298      	cmp	r0, r3
 8008f00:	bfb8      	it	lt
 8008f02:	4618      	movlt	r0, r3
 8008f04:	e7a4      	b.n	8008e50 <_printf_i+0x168>
 8008f06:	2301      	movs	r3, #1
 8008f08:	4632      	mov	r2, r6
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	47d0      	blx	sl
 8008f10:	3001      	adds	r0, #1
 8008f12:	d09b      	beq.n	8008e4c <_printf_i+0x164>
 8008f14:	3501      	adds	r5, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	9903      	ldr	r1, [sp, #12]
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	42ab      	cmp	r3, r5
 8008f1e:	dcf2      	bgt.n	8008f06 <_printf_i+0x21e>
 8008f20:	e7eb      	b.n	8008efa <_printf_i+0x212>
 8008f22:	2500      	movs	r5, #0
 8008f24:	f104 0619 	add.w	r6, r4, #25
 8008f28:	e7f5      	b.n	8008f16 <_printf_i+0x22e>
 8008f2a:	bf00      	nop
 8008f2c:	08009281 	.word	0x08009281
 8008f30:	08009292 	.word	0x08009292

08008f34 <memcpy>:
 8008f34:	440a      	add	r2, r1
 8008f36:	4291      	cmp	r1, r2
 8008f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f3c:	d100      	bne.n	8008f40 <memcpy+0xc>
 8008f3e:	4770      	bx	lr
 8008f40:	b510      	push	{r4, lr}
 8008f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4a:	4291      	cmp	r1, r2
 8008f4c:	d1f9      	bne.n	8008f42 <memcpy+0xe>
 8008f4e:	bd10      	pop	{r4, pc}

08008f50 <memmove>:
 8008f50:	4288      	cmp	r0, r1
 8008f52:	b510      	push	{r4, lr}
 8008f54:	eb01 0402 	add.w	r4, r1, r2
 8008f58:	d902      	bls.n	8008f60 <memmove+0x10>
 8008f5a:	4284      	cmp	r4, r0
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	d807      	bhi.n	8008f70 <memmove+0x20>
 8008f60:	1e43      	subs	r3, r0, #1
 8008f62:	42a1      	cmp	r1, r4
 8008f64:	d008      	beq.n	8008f78 <memmove+0x28>
 8008f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f6e:	e7f8      	b.n	8008f62 <memmove+0x12>
 8008f70:	4402      	add	r2, r0
 8008f72:	4601      	mov	r1, r0
 8008f74:	428a      	cmp	r2, r1
 8008f76:	d100      	bne.n	8008f7a <memmove+0x2a>
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f82:	e7f7      	b.n	8008f74 <memmove+0x24>

08008f84 <_free_r>:
 8008f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d048      	beq.n	800901c <_free_r+0x98>
 8008f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8e:	9001      	str	r0, [sp, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f1a1 0404 	sub.w	r4, r1, #4
 8008f96:	bfb8      	it	lt
 8008f98:	18e4      	addlt	r4, r4, r3
 8008f9a:	f000 f8d3 	bl	8009144 <__malloc_lock>
 8008f9e:	4a20      	ldr	r2, [pc, #128]	; (8009020 <_free_r+0x9c>)
 8008fa0:	9801      	ldr	r0, [sp, #4]
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	b933      	cbnz	r3, 8008fb6 <_free_r+0x32>
 8008fa8:	6063      	str	r3, [r4, #4]
 8008faa:	6014      	str	r4, [r2, #0]
 8008fac:	b003      	add	sp, #12
 8008fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fb2:	f000 b8cd 	b.w	8009150 <__malloc_unlock>
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	d90b      	bls.n	8008fd2 <_free_r+0x4e>
 8008fba:	6821      	ldr	r1, [r4, #0]
 8008fbc:	1862      	adds	r2, r4, r1
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bf04      	itt	eq
 8008fc2:	681a      	ldreq	r2, [r3, #0]
 8008fc4:	685b      	ldreq	r3, [r3, #4]
 8008fc6:	6063      	str	r3, [r4, #4]
 8008fc8:	bf04      	itt	eq
 8008fca:	1852      	addeq	r2, r2, r1
 8008fcc:	6022      	streq	r2, [r4, #0]
 8008fce:	602c      	str	r4, [r5, #0]
 8008fd0:	e7ec      	b.n	8008fac <_free_r+0x28>
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b10b      	cbz	r3, 8008fdc <_free_r+0x58>
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	d9fa      	bls.n	8008fd2 <_free_r+0x4e>
 8008fdc:	6811      	ldr	r1, [r2, #0]
 8008fde:	1855      	adds	r5, r2, r1
 8008fe0:	42a5      	cmp	r5, r4
 8008fe2:	d10b      	bne.n	8008ffc <_free_r+0x78>
 8008fe4:	6824      	ldr	r4, [r4, #0]
 8008fe6:	4421      	add	r1, r4
 8008fe8:	1854      	adds	r4, r2, r1
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	6011      	str	r1, [r2, #0]
 8008fee:	d1dd      	bne.n	8008fac <_free_r+0x28>
 8008ff0:	681c      	ldr	r4, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	6053      	str	r3, [r2, #4]
 8008ff6:	4421      	add	r1, r4
 8008ff8:	6011      	str	r1, [r2, #0]
 8008ffa:	e7d7      	b.n	8008fac <_free_r+0x28>
 8008ffc:	d902      	bls.n	8009004 <_free_r+0x80>
 8008ffe:	230c      	movs	r3, #12
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	e7d3      	b.n	8008fac <_free_r+0x28>
 8009004:	6825      	ldr	r5, [r4, #0]
 8009006:	1961      	adds	r1, r4, r5
 8009008:	428b      	cmp	r3, r1
 800900a:	bf04      	itt	eq
 800900c:	6819      	ldreq	r1, [r3, #0]
 800900e:	685b      	ldreq	r3, [r3, #4]
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	bf04      	itt	eq
 8009014:	1949      	addeq	r1, r1, r5
 8009016:	6021      	streq	r1, [r4, #0]
 8009018:	6054      	str	r4, [r2, #4]
 800901a:	e7c7      	b.n	8008fac <_free_r+0x28>
 800901c:	b003      	add	sp, #12
 800901e:	bd30      	pop	{r4, r5, pc}
 8009020:	2000042c 	.word	0x2000042c

08009024 <_malloc_r>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	1ccd      	adds	r5, r1, #3
 8009028:	f025 0503 	bic.w	r5, r5, #3
 800902c:	3508      	adds	r5, #8
 800902e:	2d0c      	cmp	r5, #12
 8009030:	bf38      	it	cc
 8009032:	250c      	movcc	r5, #12
 8009034:	2d00      	cmp	r5, #0
 8009036:	4606      	mov	r6, r0
 8009038:	db01      	blt.n	800903e <_malloc_r+0x1a>
 800903a:	42a9      	cmp	r1, r5
 800903c:	d903      	bls.n	8009046 <_malloc_r+0x22>
 800903e:	230c      	movs	r3, #12
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	2000      	movs	r0, #0
 8009044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009046:	f000 f87d 	bl	8009144 <__malloc_lock>
 800904a:	4921      	ldr	r1, [pc, #132]	; (80090d0 <_malloc_r+0xac>)
 800904c:	680a      	ldr	r2, [r1, #0]
 800904e:	4614      	mov	r4, r2
 8009050:	b99c      	cbnz	r4, 800907a <_malloc_r+0x56>
 8009052:	4f20      	ldr	r7, [pc, #128]	; (80090d4 <_malloc_r+0xb0>)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	b923      	cbnz	r3, 8009062 <_malloc_r+0x3e>
 8009058:	4621      	mov	r1, r4
 800905a:	4630      	mov	r0, r6
 800905c:	f000 f862 	bl	8009124 <_sbrk_r>
 8009060:	6038      	str	r0, [r7, #0]
 8009062:	4629      	mov	r1, r5
 8009064:	4630      	mov	r0, r6
 8009066:	f000 f85d 	bl	8009124 <_sbrk_r>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d123      	bne.n	80090b6 <_malloc_r+0x92>
 800906e:	230c      	movs	r3, #12
 8009070:	6033      	str	r3, [r6, #0]
 8009072:	4630      	mov	r0, r6
 8009074:	f000 f86c 	bl	8009150 <__malloc_unlock>
 8009078:	e7e3      	b.n	8009042 <_malloc_r+0x1e>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	1b5b      	subs	r3, r3, r5
 800907e:	d417      	bmi.n	80090b0 <_malloc_r+0x8c>
 8009080:	2b0b      	cmp	r3, #11
 8009082:	d903      	bls.n	800908c <_malloc_r+0x68>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	441c      	add	r4, r3
 8009088:	6025      	str	r5, [r4, #0]
 800908a:	e004      	b.n	8009096 <_malloc_r+0x72>
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	42a2      	cmp	r2, r4
 8009090:	bf0c      	ite	eq
 8009092:	600b      	streq	r3, [r1, #0]
 8009094:	6053      	strne	r3, [r2, #4]
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f85a 	bl	8009150 <__malloc_unlock>
 800909c:	f104 000b 	add.w	r0, r4, #11
 80090a0:	1d23      	adds	r3, r4, #4
 80090a2:	f020 0007 	bic.w	r0, r0, #7
 80090a6:	1ac2      	subs	r2, r0, r3
 80090a8:	d0cc      	beq.n	8009044 <_malloc_r+0x20>
 80090aa:	1a1b      	subs	r3, r3, r0
 80090ac:	50a3      	str	r3, [r4, r2]
 80090ae:	e7c9      	b.n	8009044 <_malloc_r+0x20>
 80090b0:	4622      	mov	r2, r4
 80090b2:	6864      	ldr	r4, [r4, #4]
 80090b4:	e7cc      	b.n	8009050 <_malloc_r+0x2c>
 80090b6:	1cc4      	adds	r4, r0, #3
 80090b8:	f024 0403 	bic.w	r4, r4, #3
 80090bc:	42a0      	cmp	r0, r4
 80090be:	d0e3      	beq.n	8009088 <_malloc_r+0x64>
 80090c0:	1a21      	subs	r1, r4, r0
 80090c2:	4630      	mov	r0, r6
 80090c4:	f000 f82e 	bl	8009124 <_sbrk_r>
 80090c8:	3001      	adds	r0, #1
 80090ca:	d1dd      	bne.n	8009088 <_malloc_r+0x64>
 80090cc:	e7cf      	b.n	800906e <_malloc_r+0x4a>
 80090ce:	bf00      	nop
 80090d0:	2000042c 	.word	0x2000042c
 80090d4:	20000430 	.word	0x20000430

080090d8 <_realloc_r>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4607      	mov	r7, r0
 80090dc:	4614      	mov	r4, r2
 80090de:	460e      	mov	r6, r1
 80090e0:	b921      	cbnz	r1, 80090ec <_realloc_r+0x14>
 80090e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090e6:	4611      	mov	r1, r2
 80090e8:	f7ff bf9c 	b.w	8009024 <_malloc_r>
 80090ec:	b922      	cbnz	r2, 80090f8 <_realloc_r+0x20>
 80090ee:	f7ff ff49 	bl	8008f84 <_free_r>
 80090f2:	4625      	mov	r5, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f8:	f000 f830 	bl	800915c <_malloc_usable_size_r>
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d20f      	bcs.n	8009120 <_realloc_r+0x48>
 8009100:	4621      	mov	r1, r4
 8009102:	4638      	mov	r0, r7
 8009104:	f7ff ff8e 	bl	8009024 <_malloc_r>
 8009108:	4605      	mov	r5, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	d0f2      	beq.n	80090f4 <_realloc_r+0x1c>
 800910e:	4631      	mov	r1, r6
 8009110:	4622      	mov	r2, r4
 8009112:	f7ff ff0f 	bl	8008f34 <memcpy>
 8009116:	4631      	mov	r1, r6
 8009118:	4638      	mov	r0, r7
 800911a:	f7ff ff33 	bl	8008f84 <_free_r>
 800911e:	e7e9      	b.n	80090f4 <_realloc_r+0x1c>
 8009120:	4635      	mov	r5, r6
 8009122:	e7e7      	b.n	80090f4 <_realloc_r+0x1c>

08009124 <_sbrk_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_sbrk_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f8 f8ee 	bl	8001310 <_sbrk>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_sbrk_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_sbrk_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20001f50 	.word	0x20001f50

08009144 <__malloc_lock>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__malloc_lock+0x8>)
 8009146:	f000 b811 	b.w	800916c <__retarget_lock_acquire_recursive>
 800914a:	bf00      	nop
 800914c:	20001f58 	.word	0x20001f58

08009150 <__malloc_unlock>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__malloc_unlock+0x8>)
 8009152:	f000 b80c 	b.w	800916e <__retarget_lock_release_recursive>
 8009156:	bf00      	nop
 8009158:	20001f58 	.word	0x20001f58

0800915c <_malloc_usable_size_r>:
 800915c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009160:	1f18      	subs	r0, r3, #4
 8009162:	2b00      	cmp	r3, #0
 8009164:	bfbc      	itt	lt
 8009166:	580b      	ldrlt	r3, [r1, r0]
 8009168:	18c0      	addlt	r0, r0, r3
 800916a:	4770      	bx	lr

0800916c <__retarget_lock_acquire_recursive>:
 800916c:	4770      	bx	lr

0800916e <__retarget_lock_release_recursive>:
 800916e:	4770      	bx	lr

08009170 <_init>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	bf00      	nop
 8009174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009176:	bc08      	pop	{r3}
 8009178:	469e      	mov	lr, r3
 800917a:	4770      	bx	lr

0800917c <_fini>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	bf00      	nop
 8009180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009182:	bc08      	pop	{r3}
 8009184:	469e      	mov	lr, r3
 8009186:	4770      	bx	lr
